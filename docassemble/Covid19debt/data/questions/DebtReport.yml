---
metadata:
  title:  |
    Personal Debt Triage  
  description:  |
    A system to help individul to understand the full extent of your their debt problem as well privide debt advices.  
  authors:
    - name: Adam Wyner, Tao Li
      organization: Swansea University 
  revision_data: 2021-06-13
---
default screen parts:
  pre: |
    <b>WARNING: For demonstration only. Do not enter personal information. Do not Sign in. Do not Sign Up.</b>
#    % if get_config('debug'):
#    <br/>
#    `id: ${ user_info().question_id }`  
#    % endif
---
modules:
  - docassemble.base.util
  - .income
---
comment: |
  ValueListNoObject, used for debt, is a child of ValueList that does not set the object_type for the debts in the list, which is also why ask_object_type is set to True.  This allows debt to collect debts of different classes, which are named in the debt_dict below under class_name, and are defined as a class in income.py.  (I recently eliminated the objects for priority_debts and nonpriority_debts, because they adopt debt's class since they are a filtered copy of debt.
  
objects:
  - user: Individual
  - jobs: JobList.using(complete_attribute='is_hourly')
  - other_income: IncomeList.using(complete_attribute='type')
  - assets: ValueList.using(complete_attribute='type')
  - income_assets: IncomeList.using(auto_gather=False)
  - expenses: PeriodicFinancialList.using(target_number=len(average_cost_living.keys()),complete_attribute='value',auto_gather=False)
  - debt: ValueListNoObject.using(there_are_any=True, ask_object_type=True, complete_attribute='complete')
  - debt_parent_list: DAList.using(there_are_any=True)
  - debt_solutions: DADict.using(object_type=DAObject,complete_attribute = "complete")
  - debt_solutions[i].match_dict: DADict.using(auto_gather=False)
---
#id: enable welcome back screen
#initial: True
#code: |
#  if returning_user(minutes=0.5):
#    welcome_back
---
#event: welcome_back
#question: |
#  Welcome back!
#subquestion: |
#  You are currently in the
#  **${ nav.get_section(display=True) }**
#  section.
#
#  ${ nav }
#
#  Press "Continue" to pick up
#  where you left off.
#buttons:
#  Continue: continue
---
id: set currency
initial: True
code: |
  set_locale(currency_symbol='Â£')
---
id: enable review answers menu item
initial: True
code: |
  menu_items = [ action_menu_item('Review Answers', 'review_answers') ]
comment: |
  This block adds Review Answers to the menu immediately.  It can be switch to only add review after a certain point in the interview, when all of the information is collected.  It does this because add_review_to_menu is initially set to false (in block id: set review to false) and then changed in the interview order to True.
---
comment: 
	The interview order controls the flow of the interview by inserting signposts and listing the order for docassemble to search for variables.  Signposts like 'user_saw_introduction' and 'debt_signpost' are used by continue button fields for pages that show information (usually using a template) but do not collect variables.
	
	We have also used conditional logic to 1) kick-out inappropriate users and to 2) list other variables to collect and even define some variables.  We may want to move the second set of logic to a separate code block, to avoid defining these variables every time the interview is run.  (However, this does keep it fresh.)
	
	After collecting user information by naming variables, the list of debts and the other lists of information are collected differently.  First, debt_parent_list[0] is called in order to set it to "Debt" to start the debt selection process as described below.  Then debt is called, which requires it to be gathered, and then a function from the income.py module .total() is called.  (debt uses a different method for .total() for ValueListNoObject then the other lists, which use the method in ValueList, but they are mostly similar.)
	
	At the
	
	
id: interview order
mandatory: True
code: |
  user_saw_introduction
  user_saw_preparation 
  debt_signpost 
  user.name.first
  user.name.last
  if user.dob.plus(years=18) > today():
    under18_kickout
  if not user.uk:
    nonUKresident_kickout
  if not user.uk_debt:
    nonUKdebt_kickout
  user.work
  user.uk_debt
  user.house_status 
  if user.house_status == 'Renting': 
    user.renting_status 
    if share_housing == True: 
      if renting_household == True: 
        user.house_status_rentshare
  if user.house_status == 'Homeowner':
    mortgage_questions
    if user.homeowner_status == 'Joint Mortgage':
      user.house_status_mortshare
  if user.house_status == 'Living with family':
    share_housing = True
  if user.house_status == 'Homeless': 
    share_housing = False
    user.house_num = 1 
    user.house_aware = False
  if share_housing == True: 
    user.house_num
  else: 
    user.house_num = 1
    user.house_aware = False
  if user.house_status == 'Homeless': 
    user_contact_information_homeless
  else:
    user_contact_information
  user.marriage
  current_insolvency 
  debt_info_signpost
  debt_parent_list[0]
  debt.total()
  finance_signpost
  jobs.total()
  other_income.total()
  assets.total()
  add_review_to_menu = True
  expenses.total()
  # documents_uploaded
  summary
  preferencees_questions
  signpost_bs_solutions
  user_saw_standard_bs
  user_saw_mentalh_bs
  user_saw_debt_solutions
  # user_signed
  predocx_variables
  letter_and_end
---
id: set review to false
code: |
  add_review_to_menu = False
comment: |
  add_review_to_menu will add a Review Answers option to the menu bar you can find by clicking on the upper right corner.  The initial block will be rerun every time there's a new screen, so originally this block will set it to false and the option will not be added.  (This block needs to be below the interview order so that this block defines add_review_to_menu first.  After "add_review_to_menu" is reached in the interview order, it will go to the next section "summary" before it reruns a screen, so this page will not have the Review Answers option.  The next page will be the first page where add_review_to_menu is set to True when the initial block is run.
---
comment: |
  This creates the overview of the interview flow on the left side of the screen. It's important that the variables (the word before the colon) do not share the same name as other variables, such as templates or events.
sections:
  - introduction_section: Introduction
  - preparation_section: Get Ready
  - personal_info: Your Information
  - debt_info: Debt Information
  - finance_info: Your Finances
    subsections: 
    - income: Income
    - expenditure: Expenses
    - summary: Summary 
  - breathing_space: Breathing Space
    subsections:
     - standard_bs_section: Standard Breathing Space
     - mentalh_bs_section: Mental Health Breathing Space
  - debt_solutions_section: Debt Solutions
  - conclusions: Print your document
---
###################### IN-INTERVIEW TEMPLATES ###############################
comment: |
  Templates for information that appear in the interview are in markdown files in the Templates folder of the package.  These are separated from the interview because it may be easier to share individual files with substance matter experts that can help with the content, potentially with the help of online WYSIWYG Markdown editors.  If this isn't the case, it may be easier to move this content back into this interview.
  Templates included in the final documents are below.
---
template: introduction
content file: introduction.md
---
template: preparation
content file: preparation.md
---
template: standard_bs
content file: standard_bs.md
---
template: mentalh_bs
content file: mentalh_bs.md
---
template: debt_management_plan
content file: debt_management_plan.md
---
template: debt_information_signpost
content file: debt_information_signpost.md
---
template: personal_finance_signpost
content file: personal_finance_signpost.md
--- 
template: personal_information_signpost
content file: personal_information_signpost.md
---
template: bs_solutions_signpost
content file: solutions_signpost.md
---


---
comment: |
  It's better to use debt.total() than debt_total, but this block catches any place in the interview or templates that still uses debt_total.
id: debt_total backup
code: |
  debt_total = debt.total()
---
features:
  navigation: True
  small screen navigation: dropdown
  progress bar: True
---
comment: |
  As mentioned above, this block uses the template variable "introduction", which uses the content file "introduction.md".  This allows future maintainers and collaborators to update the text in this section without editing the whole interview.  If that's not convenient, then text in introduction.md could be moved back here.
id: introduction block
section: introduction_section
decoration: receipt
question: |
  Create a brief to organize your debts 
subquestion: |
  ${ introduction }
fields: 
 - To continue, you must accept our [terms of use]: acknowledged_information_use
   datatype: checkboxes
   none of the above: False    
   minlength: 1
   choices:
     - I accept the terms of use.
   validation messages:
     minlength: |
        You cannot continue unless you agree to the terms of use.        
continue button field: user_saw_introduction
---
id: preparation block
section: preparation_section
question:  |
  Get your information and documents ready  
subquestion:  |
  ${ preparation }
back button: True
continue button field: user_saw_preparation  
---
id: personal info signpost
section: personal_info
decoration: address-card
question: | 
  Personal information
subquestion: | 

  ${ personal_information_signpost }
back button: True
continue button field: debt_signpost
--- 
id: breathing space and solutions signpost 
section: breathing_space
question: | 
  Great job, ${ user.name.first } 
subquestion: | 
  ${ bs_solutions_signpost } 
back button: True
continue button field: signpost_bs_solutions 
---
id: personal finance signpost 
section: finance_info
#decoration: 
question: |  
  Now, we will discuss your personal finances
subquestion: | 

  ${ personal_finance_signpost }

continue button field: finance_signpost 
back button: True
---
######################### DEBT FILTERING #########################
comment: |
  This section filters debts into three groups: 
   1 emergency priority and non-priority debts, 
   2 priority debts, and 
   3 non-priority debts.
  These variables are called by the debt_report.docx
  
  How a debt is determined to belong in the emergency debt is described in the .URGENCY section below.
  
  The priority determination is described in .PRIORITY.
---
comment: |
  priority_debts is calculated by filtering debt, which makes priority_debts also a ValueListNoObject class object.
id: priority debt code
code: |
  priority_debts = nonemergency_debts.filter(priority=True)
---
id: nonpriority debt code
code: |
  nonpriority_debts = nonemergency_debts.filter(priority=False)
---
id: non emergency debt code 
code: | 
  nonemergency_debts = debt.filter(urgency_boolean = False)
---
id: emergency debt code
code: |
  emergency_debts = debt.filter(urgency_boolean = True)
---
##################### USER INFORMATION ##################
comment: |
  User information is gathered in a fairly standard docassemble way, which is designed to be self-explanatory.  User variables can be found in the airtable at ADD LINK
---
id: personal information block
section: personal_info
question:  |
  What is your name? 
fields:
  - First Name: user.name.first
  - Last Name: user.name.last
  - Date of Birth: user.dob
    datatype: BirthDate
  - Gender: user.gender
    required: False
    choices:
      - Female
      - Male 
      - Nonbinary 
      - Prefer to write something else 
      - Prefer not to say 
      - Unknown
  - Write your gender: user.gender_writein
    required: false
    show if: 
      variable: user.gender
      is: Prefer to write something else
back button: True
---
id: user address
section: personal_info
question: | 
  What is your contact information? 
fields: 
  - Email address: user.email
  - Phone number: user.phone
  - Street address: user.address.address
    address autocomplete: True
  - City: user.address.city
  - State: user.address.state
    code: | 
      states_list(country_code="gb")
  - Postal Code: user.address.zip
back button: True
continue button field: user_contact_information 
---
id: user address homeless
section: personal_info
question: | 
  What is your contact information? 
fields: 
  - Email address: user.email
    required: False
  - Phone number: user.phone
    required: False
  - Street address: user.address.address
    required: False
    address autocomplete: True
  - City: user.address.city
    required: False
  - State: user.address.state
    required: False
    code: | 
      states_list(country_code="gb")
  - Postal Code: user.address.zip
    required: False
back button: True
continue button field: user_contact_information_homeless 
---
id: user work status 
section: personal_info
question: |
  What is your work situation?
subquestion: | 
  Check all that apply. 
fields: 
  - Work status: user.work
    datatype: checkboxes
    choices:
      - Full time 
      - Part time 
      - Unemployed 
      - Retired
      - Student
##  - What is your condition: user.mentalcondition
##    show if:
##      variable: user.ifhealth
##      is: True 
back button: True
---
comment: |
  This set of questions is used to kick out users through the interview order block - if either of these questions are answered no, then there will the interview order block calls the end events below.
id: UK question
section: personal_info
question: | 
  Are you a full-time resident of Wales?
fields: 
  - Resident of Wales: user.uk
    required: True
    datatype: yesnoradio
    help:  |
      Different regions within UK have different rules for debts. If you are holding a visa to work and live in Wales, make sure it is known when you look for perfessonal help, as some of the the debt solutions might affect your visa application. 
back button: True
---
id: debt UK 
section: personal_info
question: | 
  Is your debt based in the UK?
fields: 
  - Debt UK based: user.uk_debt
    required: True
    datatype: yesnoradio
back button: True
---
id: under 18 contact
event: under18_kickout
question: | 
  Since you are under 18 
subquestion: |
  Sorry, this debt triage tool is not intended for people under 18.  
  
  If you are under 18, you should contact a debt advisor.  There are special protections for people under 18 years old.
buttons:
  - Exit: exit
  - Restart: restart
---
id: non UK resident kickout
decoration: hand
event: nonUKresident_kickout
question: | 
  Since you do not live in the United Kingdom
subquestion: |
  Sorry, this debt triage tool is only intended for people who are residents of the United Kingdom.  Look for advice in your jurisdiction
back button: True
buttons:
  - Exit: exit
  - Restart: restart
---
id: non UK debt kickout
decoration: hand
event: nonUKdebt_kickout
question: | 
  Since your debt is not based in the United Kingdom 
subquestion: |
  Sorry, this debt triage tool is not intended for people whose debt is not based in the United Kingdom.  Look for advice in your jurisdiction
back button: True
buttons:
  - Exit: exit
  - Restart: restart
---
id: housing situation
section: personal_info
question:  |
  What is your housing situation?
fields: 
  - Housing: user.house_status
    datatype: radio
    choices: 
      - Renting: Renting
        help: | 
          You rent if you pay someone who owns the home to live in your house or apartment
      - Home owner: Homeowner
        help: | 
           If you own your house or apartment, with a mortgage, joint mortgage, or you own it outright 
      - Living with family or friends: Living with family
        help: | 
          If you are living with family or friends and do not pay to live there
      - Homeless: Homeless
        help: | 
          If you are without adequate housing or do not have a right to the place you are staying
      - Other: Other
  - Tell us about your housing status: user.house_status_other 
    show if: 
      variable: user.house_status
      is: 'Other'
back button: True
---
comment: |
  These questions are made follow up questions through conditionals in the interview order.
id: renting follow up 1
section: personal_info
question: | 
  What is your renting situation? 
fields: 
  - Renting details: user.renting_status 
    datatype: radio
    choices: 
    - Renting from a private landlord: Private Landlord
      help: | 
        A private landlord is a property owner who chooses to rent out their property themselves.
    - Social housing: Social house
      help: | 
        Social homes are provided by housing associations (not-for-profit organisations that own, let, and manage rented housing) or a local council.
back button: True
---
id:  follow up 2 
section: personal_info 
question: | 
  Are you joint tenants?
subquestion: | 
    If you have a joint tenancy, you are liable for the rent both jointly and individually. This means that one or all of you can be held responsible for the whole rent. 
yesno: renting_household
back button: True

---
id: follow up to joint tenants  
section: personal_info
question: | 
  Who do you share with for renting?
subquestion: | 
  Explain the relationship. Specific names are not required. 
  
  If you have a joint tenancy, you are liable for the rent both jointly and individually. This means that one or all of you can be held responsible for the whole rent. 
fields: 
  - Joint tenancy explaination: user.house_status_rentshare
    required: False
    datatype: area
    hint: |
      E.g., Sharing with family, friends
back button: True
--- 
id: mortgage follow up 
section: personal_info
question: | 
  What kind of homeowner are you? 
fields: 
  - no label: user.homeowner_status 
    datatype: radio
    choices: 
    - Mortgage : Mortgaged
      help: | 
        Information 
    - Own property outright: Owns property outright
      help: | 
        Information 
    - Joint Mortgage: Joint Mortgage 
      help: | 
        Information 
back button: True
continue button field: mortgage_questions
---
id: follow up shared mortgage
section: personal_information 
question: | 
  Who do you share mortgage with?
subquestion: | 
  Explain the relationship. Specific names are not required. 
fields: 
  - Joint mortgage explaination: user.house_status_mortshare
    datatype: area
    hint: |
      E.g., Sharing with partner, family
back button: True
---  
id: more housing questions
section: personal_info
question: | 
  Do you live with anyone elese? 
subquestion: | 
  This includes roommates, family, or children. 
yesno: share_housing
back button: True
---
id: follow up share household
section: personal_info 
question: | 
  Tell us more about the people you live with
fields: 
  - How many people live in your home, including yourself?: user.house_num
    datatype: integer
    default: 1
    min: 1
  - Are the people in your home aware of your debt situation?: user.house_aware
    datatype: yesnoradio
    help: |
      Some of the debt solutions require you to declare publicly and might affect your housing situation. 
back button: True
continue button field: followup_housing 
---
id: family 
section: personal_info
question: | 
  Tell us about your family 
fields: 
  - Marriage Status: user.marriage
    input type: radio
    choices:
      - Single 
      - Married
      - Divorced 
      - Separated 
      - Widowed
  - Number of dependents : user.childrenNum
    default: 0 
    datatype: integer
back button: True
---
comment: |
  The information in this block is only used in the final report.  It could potentially be used in determining whether a breathing space is appropriate, or to mark if a specific debt is subject to the ongoing procedure.  This question code in this section could be populated by debt_solutions.  This could also be an attribute of user.
id: personal insolvency 
section: personal_info
question: | 
  Are you going through a {formal insolvency procedure} right now?
subquestion: | 
  Select the insolvency procedure you are going through right now. 
  
  It is important to know whether you are currently in a formal insolvency procedure as some of the debt solutions may not be available to you. Bring this up with a debt specialist when you consult them. 
fields:
  - no label: another_debt_solution
    datatype: checkboxes
    code: |
      debt_solutions_code
back button: True
continue button field: current_insolvency 
---
code: |
  debt_solutions_code = [
                          {'Debt Relief Order': "Debt Relief Order",
                           'help': "A Debt Relief Order (DRO) are 12-month moratorium, during which time creditors cannot in force you to pay the debts included in the DRO."},
                          {'Bankruptcy': "Bankruptcy",
                           'help': "Bankruptcy is a legal proceeding involving a person or business that is unable to repay their outstanding debts."},
                          {'Individual Voluntary Arrangement': "Individual Voluntary Arrangement",
                           'help': "An Individual Voluntary Arrangement is a formal arrangement made between you and the creditor that creates a legally binding agreement. This agreement allows you to defer payment of your debts and/or the creditors to accept less than 100 per cent of the debts."},
                          {'Administration Order': "Administration Order",
                           'help': "An administration order is a county court order that prevents individual creditors from taking enforcement action without permission from the court and  requires that all your debts be dealt with together. An administration order can include a composition under which you are required to pay less than 10 pence in the pound in satisfaction of your debts"}
                        ]
---
comment: |
  This section sets is_homeowner and is_court_debt, which are used in the report but not in the logic.  The rule "Court Case Required" uses the variable.  This block should have a depends on in order to prevent these variables from becoming stale.  (Is there a problem with depending on a DAList like debt?)
id: homeowner code
code:  |
  is_homeowner = "Not Home Owner"
  court_case = True
  is_court_debt = "do not have a court action"
  if user.house_status == "Mortgaged" or  user.house_status == "Owns property outright":
    is_homeowner = "Is a Homeowner"
  for item in debt:
    if item.court_action:
      court_case = False
      is_court_debt ="Have a Court Action"
depends on:
  - user.house_status
  - debt
---
id: debt information signpost
section: debt_info
decoration: wallet
question: | 
  Debt information
subquestion: | 
  ${ debt_information_signpost } 
back button: True
continue button field: debt_info_signpost 
---
################# SELECTING DEBT TYPE ####################
comment: |
  For each debt the user enters, the type of debt is selected by using debt_parent_list, which should be undefined and refreshed each time.  The first type of debt added to each debt_parent_list is Debt, and the user is actually asked for the second type of debt in debt_parent_list.
  
  The order of this menu is determined by the 'more_specific' attribute for each type of debt in the debt_dict.  The ['more_specific'] attribute for Debt has the following:
  
  ["Credit Card", "Student Loans", "Payday loans", "Mortgage", "Bank overdraft", "Loans", "Rent arrears", "Consumer Debt", "Tax", "Penalties", "Child maintenance/child support agency debts", "Liability"]
  
  which are the choices the user sees when first asked what type of debt.  The question looks to the ['more_specific'] attribute of the last debt type in order to select the next one.  (These names aren't necessarily what the user sees - the labels for each debt (also listed in debt_dict) are used.)
  
  If "Tax" is selected, then the next choice for the user are the choices in ["Unpaid income tax, National Insurance or VAT", "TV license", "Non-domestic rates", "Council Tax", "Overpayment of benefits"].
  
  If the ['more_specific'] attribute is an empty list, then the interview will stop collecting debt_parent_list (debt_parent_list.there_is_another is set to False).  The debt type of the last item in debt_parent_list will set the object type for the first/next instance of debt in debt.  If None or Other is selected, it also ends the collection and gets rid of the last item in the debt_parent_list (named Other or None).  Anything entered into a text box for Other (if implemented) could be recorded here.  Types of debts that do not have a class in income.py could be used in a ['more_specific'] - then that type of debt would be stored as temp_sub_type and the last type of debt would be used for the class.
  
  In order to change the order of the questions, you would need to change debt_dict.  For example, 'Student Loans' could be moved out of debt_dict['Debt']['more_specific'] and into debt_dict['Loans']['more_specific']
---
id: set new object type to last item in debt parent list
code: |
  debt.new_object_type = debt_dict[debt_parent_list.last()]['class_name']
  temp_type = debt_parent_list.last()
---
id: adding debt to debt parent list automatically
code: |
  debt_parent_list[0] = "Debt"
---
id: sets there_is_another for debt parent list
code: |
  if not debt_parent_list.complete_elements().last() in debt_dict.keys():
    if debt_parent_list.complete_elements().last() == "Other":
      temp_other_name_exists = True
      temp_other_name = debt_parent_list.pop()
      debt_parent_list.there_is_another = False 
    elif debt_parent_list.complete_elements().last() == "None":
      debt_parent_list.pop()
      debt_parent_list.there_is_another = False 
    else:
      temp_sub_type_exists = True
      temp_sub_type = debt_parent_list.pop()
      debt_parent_list.there_is_another = False
  elif len(debt_dict[debt_parent_list.complete_elements().last()]['more_specific']) == 0:
    debt_parent_list.there_is_another = False 
  else:
    debt_parent_list.there_is_another = True
---
id: Selection of type of debt
question: | 
  % if len(debt.complete_elements()) > 0:
  What is the ${ ordinal(debt.current_index()) } debt you can tell us about
  % else:
  What is the first debt you can tell us about?
  % endif
subquestion: |
#  % if len(debt.complete_elements()) > 0:
#  ${ debt.complete_elements().table }
#  % endif
fields:
  - ${ debt_dict[debt_parent_list.complete_elements().last()]['more_specific_question'] }: debt_parent_list[i]
    datatype: radio
    code: |
      debt_question_code
reconsider:
  - debt_question_code
back button: True
---
comment: |
  This block creates the question code and changes the labels for two types of debts.  It may be better to have 'alt_label' as an attribute.
code: |
  debt_question_code = list()
  for dbt in debt_dict[debt_parent_list.complete_elements().last()]['more_specific']:
    tempdict = dict()
    tempdict['label'] = debt_dict[dbt]['label']
    tempdict['value'] = dbt
    if 'help' in debt_dict[dbt].keys():
      tempdict['help'] = debt_dict[dbt]['help']
    debt_question_code.append(tempdict)
  if debt_parent_list.complete_elements().last() == "Child maintenance/child support agency debts":
    tempdict = dict()
    tempdict['label'] = "Child support"
    tempdict['value'] = "None"
    debt_question_code.append(tempdict)
  elif debt_parent_list.complete_elements().last() == "Consumer Debt":
    tempdict = dict()
    tempdict['label'] = "Other monthly bills"
    tempdict['value'] = "None"
    debt_question_code.append(tempdict)
---
id: tracks whether there should be other_name attribute
code: |
  temp_other_name_exists = False
---
id: tracks whether there should be sub_type attribute
code: |
  temp_sub_type_exists = False
---
id: sets the debt .type attribute to last in debt parent list 
code: |
  debt[i].type = temp_type
  undefine('temp_type')
---
################ COMPLETING DEBT ##################
comment: |
  The Debt list uses the "complete_attribute" feature for lists, where the interview will seek to define .complete for each debt entered by the user.  The code block that sets x.complete for Debt is like a mini interview order, making sure each attribute is 
  These questions use the "generic object" feature, which allows you to write a question block that can be used for any debt that shares that class.  And because all of the classes for different debt types are subclasses of the class Debt, setting generic object: Debt will allow the question to be used for all debts.  
  If you set generic object to a more specific debt type, like Loans, the more specific class will be used first, because of the way docassemble looks for variables.
  
---
id: Debt complete order
generic object: Debt
code: |
  x.type
  x.value
  x.creditor
  x.name
  if temp_other_name_exists:
    x.other_name = temp_other_name
  x.court_action
  x.urgency
  x.priority
  x.details
  x.notes_finished
  x.complete = True
---
################ X.TYPE ##################
comment: |
  The Debt list uses the "complete_attribute" feature for lists, where the interview will seek to define .complete gor each debt.  
---
id: sets the debt .type attribute to last in debt parent list 
code: |
  debt[i].type = temp_type
  undefine('temp_type')
---
generic object: LoansDebt
code: |
  x.top_type = "Loans"
---
generic object: TaxDebt
code: |
  x.top_type = "Tax"
---
generic object: PenaltiesDebt
code: |
  x.top_type = "Fines"
---
generic object: LiabilityDebt
code: |
  x.top_type = "Liabilities"
---
generic object: ConsumerDebt
code: |
  x.top_type = "Monthly Bills"
---
################ X.VALUE ##################
comment: |
  Because debt is a ValueListNoObject, every debt must have an attribute "value", which is the amount of the debt.  value is used by the method .total()
---
id: debt amount
generic object: Debt
question: | 
  How much is owed on this ${ x.name.lower() } debt?
fields:
  - Amount: x.value
    datatype: currency 
    min: 0
    currency symbol: Â£
back button: True
---
################ X.NAME ##################
comment: |
  .name is used in the report and in other questions (and will be sought before value because it is used in the question for .value).  The temp_sub_type in the logic is intended for an "Other" field in the debt selection process, which isn't implemented now.  Normally, the name will simply be set to the type of the debt ("Rent arrears", for example).
  The generic object for LoansDebt demonstrates how this can be changed for certain types of debt.  For LoansDebt (credit cards, mortgages...), the name includes the creditor, so in the summary table it will say something like "Visa credit card".
---
id: .name for Debt
generic object: Debt
code: |
  if temp_sub_type_exists:
    x.name = temp_sub_type
  else:
    x.name = x.type
  undefine('temp_sub_type_exists','temp_sub_type')
---
id: .name for LoansDebt
generic object: LoansDebt
code: |
  x.name = x.creditor +" " + x.type
---
######################### X.CREDITOR ##########################
comment: |
  Making generic objects to set creditor is useful because it allows a default answer, if there is likely to be one answer for creditor, such as "The Crown" for NationalTax.
---
id: .creditor for Debt
generic object: Debt
question: | 
  What is the name of the creditor for this debt?
subquestion: | 
  The credior is the person or company you owe money to. 
fields:
  - Creditor name: x.creditor
back button: True
---
id: .creditor for Student loans
generic object: StudentLoans
question: | 
  What is the name of the creditor for this debt?
subquestion: | 
  The credior is the person or company you owe money to. 
fields:
  - Creditor name: x.creditor
    default: Student Loans Company
back button: True
---
id: .creditor for Traffic Fines
generic object: TrafficPenaltiesDebt
question: | 
  Who is enforcing the traffic fine?
fields:
  - Creditor name: x.creditor
    datatype: dropdown
    choices:
      - Traffic Enforcement Centre
      - A magistrate's court
back button: True
---
id: .creditor for Traffic Fines
generic object: NationalTax
question: | 
  Who is collecting the taxes?
fields:
  - Creditor name: x.creditor
    default: The Crown
back button: True
---
######################### X.COURT_ACTION ##########################
comment: |
  This question was created to make sure the interview always asked if there was a related court action, since it is used in the logic to determine if an "Administration Order" is an appropriate debt solution.  It can be duplicative - there may be a question about a court case in the urgency section as well.  It may be better to have 
---
generic object: Debt
question: Is there a court action involving this debt?
fields:
  - : x.court_action
    datatype: yesnoradio
back button: True
---
################ X.URGENCY ##################
comment: |
  The urgency attribute signifies if a debt requires immediate, emergency action, as described in Section 4 in Chapter 8 of the Debt Advice Handbook.
    In most circumstances, the user sets the urgency attribute by checking boxes for to choose emergency situations associated with that type of debt - for example, "a fuel disconnection" is an emergency situation for the debt type class EnergyBillArrears.  The list for debt types (which could be, and often is, a list of one choice) can be updated or added to as shown below.
    The two variables can be confusing:
      - x.emergency_choices is the list of possible emergency situations for a debt type. It creates the list the user chooses
      - x.emergency_dict records the user's choices, in a DADict where the key is the name of the choice and the value is True or False, depending on what the user chooses.
    Alternatively, if it is easier to determine it is an urgent situation by asking questions about specific facts, then x.urgency can be set by generic object questions and code blocks, as demonstrated below for RentDebt
---
#id: gets to urgency for Debt
#generic object: Debt
#question: | 
#  Has the creditor threatened to take immediate action against your fuel supply#, property, or threatened you with imprisonment?
#subquestion: | 
#  This can considered an urgent situation. Check the box if any of these apply #to this debt. 
#fields:
#  - The creditor threatened action: x.is_urgent
#    datatype: yesnoradio
#  - Explain what happened : x.urgency_reason
#    show if:
#      variable: x.is_urgent
#      is: True
#back button: True
---
comment: |
  There are three blocks that use the "if" feature, depending on whether the number of emergency choices for a particular type of debt is less than, equal to, or more than 1.  If it there are no emergency choices, then x.emergency_dict is created by code and.  (This is a workaround because using checkboxes creates a DADict automatically
sets: x.emergency_dict
if: number_of_emergency_choices < 1
generic object: Debt
code: |
  x.initializeAttribute('emergency_dict', DADict.using(auto_gather=False,gathered=True))
---
comment: |
  If there is only one choice, this question will ask a yes or no question about whether the emergency situation applies.
if: number_of_emergency_choices == 1
generic object: Debt
question: Are you at risk of ${ i } for ${ x.name.lower() }?
subquestion: |
  
fields:
  - no label: x.emergency_dict[i]
    datatype: yesnoradio
---
if: number_of_emergency_choices > 1
generic object: Debt
question: Are you at risk of any of the following relating to ${ x.name.lower() }? 
subquestion: |
  Check all that apply
  
fields:
  - no label: x.emergency_dict
    datatype: checkboxes
    code: |
      x.emergency_choices
back button: True
---
comment: |
  Because the above conditional blocks depend on number_of_emergency_choices, this code  block will be run before the questions above.  If there is only one choice, there will only be one 
generic object: Debt
code: |
  if len(x.emergency_choices) > 1:
    number_of_emergency_choices = len(x.emergency_choices)
  elif len(x.emergency_choices) == 1:
    x.initializeAttribute('emergency_dict', DADict.using(ask_number=True,target_number = 1))
    number_of_emergency_choices = len(x.emergency_choices)
  else:
    x.initializeAttribute('emergency_dict', DADict.using(auto_gather=False,gathered=True))
    number_of_emergency_choices = len(x.emergency_choices)
---
comment: |
  The only time that the interview will look for x.emergency_dict.new_item_name is when number of emergency choices is 1.
generic object: Debt
code: |
  x.emergency_dict.new_item_name = x.emergency_choices[0]
---
comment: |
  After the user completes the .emergency_dict checkboxes, this box determines if any of the reasons were checked and sets x.urgency to a string of all the checked boxes.
id: calculates .urgency from .urgency_reason if appropriate
generic object: Debt
code: |
  if len(x.emergency_dict.true_values()) > 0:
    x.urgency = x.emergency_dict.true_values().comma_and_list()
  else:
    x.urgency = "None"
depends on: x.emergency_dict
---
comment: |
  This section sets .urgency_boolean, which is used to filter urgent debts from non-urgent debts.
id: changes urgency to True or False
depends on:
  - debt[i].urgency
code: |
  if debt[i].urgency == "None":
    debt[i].urgency_boolean = False
  else:
    debt[i].urgency_boolean = True
---
################### EMERGENCY CHOICES FOR X.URGENCY #####################
comment: |
  x.emergency_choices needs to be set to a list of strings.  Ideally, the strings are standard labels for common types of emergencies.
  The Airtable allows you to create a list of emergencies by choosing from a standard list in another table.  The docassemble code blocks below can be curt and paste from the Airtable.
  
generic object: Debt
code: |
  x.emergency_choices = []
---
generic object: BankOverdraft 
code: |
  x.emergency_choices = ["money being withdrawn from your account"]
---
generic object: RentDebt 
code: |
  x.emergency_choices = ["losing your home"]
---
generic object: EnergyBillArrears 
code: |
  x.emergency_choices = ["a fuel disconnection"]
---
generic object: TVLicenseDebt 
code: |
  x.emergency_choices = ["imprisonment"]
---
generic object: Fine 
code: |
  x.emergency_choices = ["your essential personal property being seized","imprisonment"]
---
generic object: ChildSupport 
code: |
  x.emergency_choices = ["your wages or bank account being garnished","your essential personal property being seized","a charging order","a third-party debt order","imprisonment","a suspension of your driving privileges","a suspension of your passport"]
---
generic object: IncomeTax 
code: |
  x.emergency_choices = ["imprisonment"]
---
generic object: HirePurchase 
code: |
  x.emergency_choices = ["your essential personal property being seized"]
---
generic object: NationalTax 
code: |
  x.emergency_choices = ["your essential personal property being seized"]
---
generic object: PaydayLoan 
code: |
  x.emergency_choices = ["money being withdrawn from your account"]
---
generic object: Maintenance 
code: |
  x.emergency_choices = ["your essential personal property being seized","imprisonment"]
---
generic object: NationalInsurance 
code: |
  x.emergency_choices = ["your entitlements affected"]
---
generic object: TrafficPenaltiesDebt 
code: |
  x.emergency_choices = ["your essential personal property being seized"]
---
generic object: CouncilTax 
code: |
  x.emergency_choices = ["your essential personal property being seized","a bankruptcy proceeding for taxes"]    
---
################# URGENCY ALT METHOD ###################
comment: |
  These blocks below override the .emergency_choices method to determine urgency.
id: .urgency for CreditCardDebt
generic object: CreditCardDebt
code: |
  x.urgency = "None"
---
id: .urgency for PenaltyChargeDebt
generic object: PenaltyChargeDebt
code: |
  x.urgency = "None"
---
comment: |
  This block creates a new variable to help determine urgency.  If this method is used, then it is good to add the same variables to the x.notes section below.
id: gets to .urgency for RentDebt
generic object: RentDebt
question: Has a possession order been granted against you?
fields:
  - : x.possession_order
    datatype: yesnoradio
  - Date the property will be repossessed: x.repossession_date
    datatype: date
    show if: x.possession_order
back button: True
---
id: calculates .urgency for RentDebt
generic object: RentDebt
code: |
  if x.possession_order:
    if x.repossession_date.minus(days=3) < today():
      x.urgency = "REPOSSESSION IN LESS THAN 3 DAYS"
    else:
      x.urgency = "Possession order has been granted, but reposessession not scheduled for at least 3 days"
  else:
    x.urgency = "None"
---
######################### X.PRIORITY FORMULAS ##########################
comment: |
  The priority attribute helps determine if a debt should be dealt with as a priority debt, as defined in Chapter 8 of the Debt Advice Handbook, or a non-priority debt, as defined by Chapter 9.  Some types of debt may always be considered a priority, others
  
  Priority is set in two parts, usually.  First, there is a generic object with logic that determines whether a debt is considered a priority.  This logic may include other variables, which are defined in the second block.
  
  The Priority Hierarchy View in the solutions table and the Priority Variables View in the variables table in the Airtable can help this section be created.  In the Priority Hierarchy View, there is a field for the logic, and next to that you can link to or add any variables used in that logic.  By doing so, that variable will be added to the Priority Variables view, where question and other information can be added.  The code and question blocks below can then be cut and paste from the Airtable.
---
comment: |
  It might seem like some of the blocks are inaccurate - for example, LoansDebt seems to set x.priority to False, and there are types of loans, like mortgages, that may be a priority debt.  However, this block only set x.priority to False for a LoansDebt subclass if there is not a generic object block for the more specific subset.
generic object: LoansDebt
code: |
  x.priority = False
---
generic object: HirePurchase
code: |
  if x.delinquent and x.for_essential_services:
    x.priority = True
  else:
    x.priority = False
---
generic object: MortgageDebt
code: |
  if x.delinquent and x.is_current_home:
    x.priority = True
  else:
    x.priority = False
---
generic object: Pawnbroker
code: |
  if x.delinquent and x.for_essential_services:
    x.priority = True
  else:
    x.priority = False
---
generic object: BankOverdraft
code: |
  if x.money_in_account:
    x.priority = True
  else:
    x.priority = False
---
generic object: Fine
code: |
  x.priority = True
---
generic object: PenaltyChargeDebt
code: |
  x.priority = False
---
generic object: TrafficPenaltiesDebt
code: |
  if x.creditor == "Traffic Enforcement Centre":
    x.priority = False
  else:
    x.priority = True
---
generic object: TaxDebt
code: |
  x.priority = True
---
generic object: NonDomesticRates
code: |
  if x.court_action and x.risk_of_losing_essential_goods:
    x.priority = True
  else:
    x.priority = False
---
generic object: ValueAddedTax
code: |
  if x.continue_trading:
    x.priority = True
  else:
    x.priority = False
---
generic object: TaxCreditOverpayment
code: |
  if x.awarded_or_migrated_to_universal_credit:
    x.priority = False
  else:
    x.priority = True
---
generic object: SocialFundLoan
code: |
  x.priority = False
---
generic object: ChildSupport
code: |
  x.priority = True
---
generic object: Maintenance
code: |
  x.priority = True
---
generic object: ShopliftingRecovery
code: |
  x.priority = False
---
generic object: CivilDamages
code: |
  x.priority = False
---
generic object: EnergyBillArrears
code: |
  x.priority = True
---
generic object: WaterArrears
code: |
  x.priority = False
---
generic object: PrivateParkingCharge
code: |
  x.priority = False
---
generic object: RentDebt
code: |
  if x.delinquent and x.is_current_home:
    x.priority = True
  else:
    x.priority = False
---
generic object: ConsumerDebt
code: |
  if x.delinquent and x.for_essential_services:
    x.priority = True
  else:
    x.priority = False
---
######################### BEGINNING OF PRIORITY VARIABLES ##########################
id: priority debt for home
generic object: Debt
question: Is the ${ x.name.lower() } for your current home?
fields:
  - Debt is for current home?: x.is_current_home
    datatype: yesnoradio
back button: True
---
generic object: Debt
question: More information about ${ x.name.lower() }
fields:
  - Is the debt needed to pay essential services?: x.for_essential_services
    datatype: yesnoradio
back button: True
---
generic object: Debt
question: More information about ${ x.name.lower() }
fields:
  - Are you at risk of losing essential goods because of the enforcement of this debt?: x.risk_of_losing_essential_goods
    datatype: yesnoradio
back button: True
---
generic object: Debt
question: More information about ${ x.name.lower() }
fields:
  - What date was the overpayment awarded?: x.date_of_award
    datatype: date
---
generic object: Debt
question: More information about ${ x.name.lower }
fields:
  - Have you been awarded or migrated to universal credit?: x.awarded_or_migrated_to_universal_credit
    datatype: yesnoradio
back button: True
---
generic object: Debt
question: More information about ${ x.name.lower() }
fields:
  - Has the business continued trading?: x.continue_trading
    datatype: yesnoradio
back button: True
---
generic object: Debt
question: Is there money in the account that the bank can take to pay the debt? 
fields:
  - : x.money_in_account
    datatype: yesnoradio
back button: True
---
######################### X.DETAILS ##########################
comment: |
  This section allows additional attributes for debt types to be added.
---
id: details order, default for debt
generic object: Debt
code: |
  x.delinquent
  x.details = True
---
id: question to get you to first_miss_date for Debt
generic object: Debt
question: | 
   Payment history for ${ x.name.lower() }
fields:
  - Are you behind on payments?: x.delinquent
    datatype: yesnoradio
    default: True
  - When did you first miss payment?: x.first_miss_date
    datatype: date
    show if: x.delinquent
back button: True
---
######################### X.NOTES ##########################
comment: |
  This section creates a notes attribute, which collects the attributes specific to that debt type.
  The depends on section should list every variable used in the formula, so that notes is recalculated any time any of those variables change.
  .notes_finished is used because the interview had an "Input not processed" error, which seems like it was caused by the .notes being defined in the block until it reaches a variable that has not been defined, then the interview tries to define that variable, but then the interview does not need to go back to the block because x.notes is set, even though it didn't get all the way through the block.
---
depends on:
  - x.delinquent
  - x.first_miss_date
id: notes for Debt
generic object: Debt
code: |
  if not defined('x.notes'):
    x.notes = ""
  if x.delinquent:
    x.notes += "First missed payment date: " + format_date(x.first_miss_date) + ".  "
  else:
    x.notes += "No missed payments."
  x.notes_finished = True
---
depends on:
  - x.delinquent
  - x.for_essential_services
id: notes for Pawnbroker
generic object: Pawnbroker
code: |
  if x.delinquent:
    x.notes = "First missed payment date: " + format_date(x.first_miss_date) + ".  "
  else:
    x.notes = "No missed payments.  "
  if x.for_essential_services:
    x.notes += "For essential goods."
  else:
    x.notes += "Fon non-essential goods."
  x.notes_finished = True
---
depends on:
  - x.delinquent
  - x.for_essential_services
id: notes for HirePurchase
generic object: HirePurchase
code: |
  if x.delinquent:
    x.notes = "First missed payment date: " + format_date(x.first_miss_date) + ".  "
  else:
    x.notes = "No missed payments.  "
  if x.for_essential_services:
    x.notes += "For essential goods."
  else:
    x.notes += "For non-essential goods."
  x.notes_finished = True
---
depends on:
  - x.delinquent
  - x.goods_as_described
  - x.goods_satisfactory_quality
id: notes for CreditCardDebt
generic object: CreditCardDebt
code: |
  if x.delinquent:
    x.notes = "First missed payment date: " + format_date(x.first_miss_date) + ".  "
  else:
    x.notes = "No missed payments.  "
  if not x.goods_as_described:
    x.notes += "Includes payments for misrepresented goods.  "
  if not x.goods_satisfactory_quality:
    x.notes += "Includes payments for shoddy goods.  "
  x.notes_finished = True

---
depends on:
  - x.delinquent
  - x.is_current_home
id: notes for Mortgage
generic object: Mortgage
code: |
  if x.delinquent:
    x.notes = "First missed payment date: " + format_date(x.first_miss_date) + ".  "
  else:
    x.notes = "No missed payments.  "
  if x.is_current_home:
    x.notes += "For current home."
  else:
    x.notes += "Not for current home."
  x.notes_finished = True
---
depends on:
  - x.delinquent
id: notes for ConsumerDebt
generic object: ConsumerDebt
code: |
  if x.delinquent:
    x.notes = "First missed payment date: " + format_date(x.first_miss_date) + ".  "
  else:
    x.notes = "No missed payments."
  x.notes_finished = True
---
depends on:
  - x.date_of_award
  - x.awarded_or_migrated_to_universal_credit
id: notes for TaxCreditOverpayment
generic object: TaxCreditOverpayment
code: |    
  x.notes = "Overpayment awarded on " + format_date(x.date_of_award) + ".  "
  if x.awarded_or_migrated_to_universal_credit:
    x.notes += user.name.full() + " has been awarded or migrated to universal credit."
  else:
    x.notes += user.name.full() + " has not been awarded or migrated to universal credit."
  x.notes_finished = True
---
depends on:
  - x.money_in_account
id: notes for BankOverdraft
generic object: BankOverdraft
code: |    
  if x.money_in_account:
    x.notes = "Currently money in account at risk."
  else:
    x.notes = "No money currently in account."
  x.notes_finished = True
---
depends on:
  - x.continue_trading
id: notes for ValueAddedTax
generic object: ValueAddedTax
code: |    
  if x.continue_trading:
    x.notes = "Business continues to trade."
  else:
    x.notes = "Business no longer trades."
  x.notes_finished = True
---
depends on:
  - x.court_action
  - x.risk_of_losing_essential_goods
id: notes for NonDomesticRates
generic object: NonDomesticRates
code: |    
  if x.court_action:
    x.notes = "Court action.  "
    if x.risk_of_losing_essential_goods:
      x.notes += "Risk of losing essential goods."
  else:
    x.notes = "No court action."
  x.notes_finished = True
---
depends on:
  - x.possession_order
  - x.repossession_date
  - x.delinquent
  - x.first_miss_date
  - x.is_current_home
id: notes for RentDebt
generic object: RentDebt
code: |
  if x.possession_order:
    x.notes = "REPOSSESSION scheduled for " + format_date(x.repossession_date) + ",  "
  else:
    x.notes = "No repossession scheduled.  "
  if x.delinquent:
    x.notes += "First missed payment date: " + format_date(x.first_miss_date)
  else:
    x.notes += "No missed payments.  "
  if x.is_current_home:
    x.notes += "For current home."
  else:
    x.notes += "Not for current home."
  x.notes_finished = True
---
comment: |
  These variables are used in x.notes for CreditCardDebt and will be asked.
id: goods as described
generic object: Debt
question:
fields:
  - Were the goods purchased as described?: x.goods_as_described
    datatype: yesnoradio
  - Were the goods purchased of satisfactory quality?: x.goods_satisfactory_quality
    datatype: yesnoradio
back button: True
---
######################### DEBT SUMMARY ##########################
comment: |
  The debt summary combines a table of the existing debt already collected with variable that sets x.there_is_another, which is required by the docassemble gathering process. It can do this because debt.table has "required gathered" set to False.
id: debt summary  
section: debt_info
question: |
  Description of debts entered so far
  
subquestion: |
  ${ debt.table }
  
field: debt.there_is_anotherstep
buttons:
  - "Add another debt": True
  - "Continue to next section": False
---
comment: |
    debt.there_is_anotherstep is used to ensure that certain variables are undefined before the next debt is gathered.  There are better ways to do this.
id: sets debt.there_is_another and undefines
code: |
  if debt.there_is_anotherstep:
    undefine('debt.there_is_anotherstep','debt_parent_list','debt_type_input_method','number_of_emergency_choices')
    debt.there_is_another = True
  else:
    undefine('debt.there_is_anotherstep')
    debt.there_is_another = False
---
id: table for debt list
table: debt.table
rows: debt
columns: 
  - Debt Type:  |
      row_item.name
  - Debt Amount:  |
      currency(row_item.value)
  - Notes: |
      row_item.notes
require gathered: False     
edit:
  - review_variable
---
############################## REVIEW TABLE ##############################
comment: |
  The "Add variables to review" View in the variables table allows the blocks below to be cut and pasted from the Airtable.
---
event: debt[i].review_variable
question: |
  Review ${ debt[i].name }
review:
  - Edit: debt[i].value
    button: |
      Value: **${ currency(debt[i].value) }**
  - Edit: debt[i].creditor
    button: |
      Creditor: **${ debt[i].creditor }**
  - Edit: debt[i].delinquent
    button: |
      Debt is delinquent: **${ debt[i].delinquent }**
  - Edit: debt[i].first_miss_date
    button: |
      First date of missed payment: **${ debt[i].first_miss_date }**
  - Edit: debt[i].is_current_home
    button: |
      The debt is for current home.: **${ debt[i].is_current_home }**
  - Edit: debt[i].debt[i].for_essential_services
    button: |
      The debt is for essential services: **${ debt[i].debt[i].for_essential_services }**
  - Edit: debt[i].court_action
    button: |
      There is a court action: **${ debt[i].court_action }**
  - Edit: debt[i].risk_of_losing_essential_goods
    button: |
      There is a risk of losing essential goods: **${ debt[i].risk_of_losing_essential_goods }**
  - Edit: debt[i].awarded_or_migrated_to_universal_credit
    button: |
      Awarded or migrated to universal credit: **${ debt[i].awarded_or_migrated_to_universal_credit }**
  - Edit: debt[i].continue_trading
    button: |
      The business has continued trading: **${ debt[i].continue_trading }**
  - Edit: debt[i].money_in_account
    button: |
      There is money in the bank account.: **${ debt[i].money_in_account }**
  - Edit: debt[i].possession_order
    button: |
      There is a possession order.: **${ debt[i].possession_order }**
  - Edit: debt[i].repossession_date
    button: |
      Repossession Date: **${ format_date(debt[i].repossession_date) }**
---
event: review_answers
question: |
  Review 
review:
  - Edit: user.name.first
    button: |
      First name: **${ user.name.first }**
  - Edit: user.name.last
    button: |
      Last name: **${ user.name.last }**
  - Edit: user.uk
    button: |
      Resident of Wales: **${ user.uk }**
  - Edit: user.uk_debt
    button: |
      UK Based Debt: **${ user.uk_debt }**
  - Edit: user.address.address
    button: |
      Street: **${ user.address.address }**
  - Edit: user.address.city
    button: |
      City: **${ user.address.city }**
  - Edit: user.address.country
    button: |
      State: **${ user.address.country }**
  - Edit: user.address.zip
    button: |
      Zip: **${ user.address.zip }**
  - Edit: user.phone
    button: |
      Phone: **${ user.phone }**
  - Edit: user.email
    button: |
      Email: **${ user.email }**
  - Edit: user.dob
    button: |
      Date of Birth: **${ user.dob }**
  - Edit: user.gender
    button: |
      Gender: **${ user.gender }**
  - Edit: user.gender_writein
    button: |
      Gender write-in: **${ user.gender_writein }**
  - Edit: user.marriage
    button: |
      Marriage Status: **${ user.marriage }**
  - Edit: user.childrenNum
    button: |
      Number of Children: **${ user.childrenNum }**
  - Edit: user.work
    button: |
      Employment Status: **${ user.work.true_values() }**
  - Edit: user.house_status
    button: |
      Housing Status: **${ user.house_status }**
  - Edit: user.house_status_other
    button: |
      Housing Status Other: **${ user.house_status_other }**
  - Edit: share_housing
    button: |
      Shares housing with others: **${ share_housing }**
  - Edit: user.house_status_mortshare
    button: |
      Joint mortgage: **${ user.house_status_mortshare }**
  - Edit: user.house_status_rentshare
    button: |
      Joint Tenancy: **${ user.house_status_rentshare }**
  - Edit: user.renting_status
    button: |
      Renting Status: **${ user.renting_status }**
  - Edit: user.homeowner_status
    button: |
      Homeowner Status: **${ user.homeowner_status }**
  - Edit: user.house_num
    button: |
      Number in Household: **${ user.house_num }**
  - Edit: user.house_aware
    button: |
      Others in Household Aware of Debt Situation: **${ user.house_aware }**
  - Edit: another_debt_solution
    button: |
      Existing Debt Solution: **${ another_debt_solution }**
  - Edit: court_case
    button: |
      Court Case: **${ court_case }**
under: |
  
  Debts
  
  ${ debt.table }
  
  ${ debt.add_action() }
  
  Employment Income
  
  ${ jobs.table }
  
  ${ jobs.add_action() }
  
  Other Income
  
  ${ other_income.table }
  
  ${ other_income.add_action() }
  
  Assets
  
  ${ assets.table }
  
  ${ assets.add_action() }
  
  Expenses
  
  ${ expenses.table }
---
id: breathing space description
section: standard_bs_section
question:  |
  Breathing space 
subquestion:  |
  ${ standard_bs }
back button: True
continue button field: user_saw_standard_bs
---
id: mental health breathing space description
section: mentalh_bs_section
question:  |
  Mental health breathing space 
subquestion:  |
  ${ mentalh_bs }
back button: True
continue button field: user_saw_mentalh_bs
---
############################## INCOME COLLECTION #################################
comment: |
  Income and assets are collected in the standard way in income.py.
---
id: type of income information selection
question:  |
  Do you have any of the following? 
subquestion:   | 
  Check all that apply 
 
section: income
fields:
  - Employment income: jobs.there_are_any
    datatype: yesnowide
    help: | 
      Pay from full-time and part-time work
  - Other income: other_income.there_are_any
    datatype: yesnowide
    help: | 
      Income not from employment can include regular maintenance or child support payments,disability benefits, investment income, contributions from household members, occupational or other pensions
  - Assets: assets.there_are_any
    datatype: yesnowide
    help: | 
      Assets **include** most items you own like cars, boats, buildings or land, or other items of value. Assets **do not** include household equipment like bedding; items you use for your job or buisness. 
#  - Expenses: expenses.want_to_collect
#    datatype: yesnowide
#    default: True
#    help: | 
#     List everything you spend your income on: housing, childcare, fuel, health costs, transport, furniture, hire purchase, fines, laundry, telephone, TV, broadband, toiletries, clothing, food, child support payments, self-employment costs and so on. 
back button: True
---
id: asks if there is another job
question: Job Information Summary
subquestion: |
  Here is the job information you have entered so far:
  
  ${ jobs.table }
  
field: jobs.there_is_another
buttons:
  - "Add another income from a job": True
  - "Continue to next section": False
---
id: jobs table
table: jobs.table
rows: jobs
columns:
  - Employer: |
      row_item.employer
  - Annual Amount: |
      currency(row_item.amount())
     
edit:
  - is_hourly 
minimum_number: 1

---
id: other income table
table: other_income.table
rows: other_income
columns:
  - Source of Income: |
      row_item.type if defined('row_item.type') else ''
  - Amount: |
      currency(row_item.amount(), symbol=u'Â£')
      
      
      
edit:
  - type 
minimum_number: 1
---
id: assets table
table: assets.table
rows: assets
columns:
  - Type: |
      row_item.type if defined('row_item.type') else ''
  - Value: |
      currency(row_item.amount(), symbol=u'Â£')
      
edit:
  - type 
minimum_number: 1
---
id: income from assets table
table: income_assets.table
rows: income_assets
columns:
  - Type: |
      row_item.type if defined('row_item.type') else ''
  - Amount: |
      currency(row_item.amount())
      
minimum_number: 1
---
id: expenses table
table: expenses.table
rows: expenses
columns:
  - Type: |
      row_item.type if defined('row_item.type') else ''
  - Amount: |
      currency(row_item.amount())
      
      
edit:
  - type 
minimum_number: 1
---
id: job info collection
question: |
  Describe your ${ordinal(i)} job.
section: income
fields:
  - Source of this income?: jobs[i].employer
    help:  |
      It can be your job earnings, benifits, pensions, student loans or any other form of income
  - Is it an hourly job?: jobs[i].is_hourly
    datatype: yesno
  - Hourly rate: jobs[i].hourly_rate
    datatype: currency
    min: 0
    currency symbol: Â£
    show if: jobs[i].is_hourly
  - Amount: jobs[i].value 
    datatype: currency
    min: 0
    currency symbol: Â£
    show if:
      variable: jobs[i].is_hourly
      is: False
  - 'Select period': jobs[i].period
    datatype: number
    code:  |
     period_list() + [[4,"Per quarter"]]
  - Average hours worked per period: jobs[i].hours_per_period
    datatype: integer
    show if: jobs[i].is_hourly


---
id: other income info collection
question: |
  What income do you have that is not from a job?
section: income
fields:
  - What type of income is it?: other_income[i].type
    code: |
      other_income_type_list
  - Amount: other_income[i].value 
    datatype: currency
    min: 0
    currency symbol: Â£
  - Over what time period: other_income[i].period
    datatype: number
    code: |
      period_list()
---
code: |
  other_income_type_list = ["Disability benefits", "Other benefits", "Private pensions", "Self-employed income", "State pension plus any IS/PC", "Tax credits", "Other"]
---
id: other income summary
question: Other income
subquestion:
  
  ${ other_income.table }

  Your total annual non-wage income is ${ currency(other_income.total()) }
  
  Your total monthly non-wage income is ${ currency(other_income.total(period_to_use=12)) }  
  
field: other_income.there_is_another
buttons:
  - "Add another income source": True
  - "Continue to next section": False

---
id: asset info collection
question: |
  What assets do you have?
section: income
fields:
  - What type of asset is it?: assets[i].type
    code: |
      asset_type_list()
  - Asset name?:  assets[i].type
    show if:
      variable: assets[i].type
      is: other
    help:  |
      Write down anything you think of as valuable, A new TV, laptop etc.
  - Estimated Value: assets[i].value 
    datatype: currency
    min: 0
    currency symbol: Â£
  - Does this asset generate income?: assets[i].generates_income
    datatype: yesnoradio
  - Income generated by this asset: assets[i].income
    datatype: currency
    min: 0
    currency symbol: Â£
    show if: assets[i].generates_income
  - Loan amount (if any): assets[i].amount_owed
    required: False
    datatype: currency
    min: 0
    currency symbol: Â£
    show if: assets[i].generates_income
  - Over what time period: assets[i].period
    datatype: number
    code: |
      period_list()
    show if: assets[i].generates_income
  - Vehicle year:  assets[i].vehicle_year
    required: False
    show if:
      variable: assets[i].type
      is: vehicle
  - Vehicle make:  assets[i].vehicle_make
    required: False
    show if:
      variable: assets[i].type
      is: vehicle
  - Vehicle model:  assets[i].vehicle_model
    required: False
    show if:
      variable: assets[i].type
      is: vehicle
reconsider:
  - income_assets    
---
############################### EXPENSES ###################################
comment: |
  Expenses is set up differently, to allow the collection of many expenses on one page
  
  To change the list or categories of expenses, the average_cost_living dictionary needs to be edited.  If categories or added or removed, the code below would have to change so that the number of fields (currently 13) matches the number of categories in the list.
---
id: expense information collection
question: |
  What expenses do you have?
section: expenditure
fields:
  - What type of expense is it?: expenses[i].type
    code: |
      expense_type_list()
  - Expense amount: expenses[i].value 
    datatype: currency
    min: 0
    currency symbol: Â£
  - Over what time period: expenses[i].period
    datatype: number
    code: |
      period_list()
---
id: expense deviation calculation
code:  |
  expense_advices =[]
  for item in expenses:
    if item.type in average_cost_living.keys():
       spend_diff = item.value - average_cost_living[item.type] 
       if spend_diff <0 and abs(spend_diff) >40:
         expense_advices.append("You spend "+currency(item.value)+" on "+ item.type+ "  which is "+currency(abs(spend_diff))+" less than average expenditure " + currency(average_cost_living[item.type])+" per month.")
       elif spend_diff >0 and abs(spend_diff) >40:
         expense_advices.append("You spend "+currency(item.value)+" on "+ item.type+ "  which is "+currency(abs(spend_diff))+" more than average expenditure " + currency(average_cost_living[item.type])+" per month.")  
---
id: expenses single page 
section: expenditure
question:  Enter your expenses for each cateogry 

subquestion: |

  ${ expenses[0].type.capitalize()}: [FIELD expenses[0].value] [FIELD expenses[0].period]
  
  ${ expenses[1].type.capitalize() }: [FIELD expenses[1].value] [FIELD expenses[1].period]
  
  ${ expenses[2].type.capitalize()}: [FIELD expenses[2].value] [FIELD expenses[2].period]
  
  ${ expenses[3].type.capitalize() }: [FIELD expenses[3].value] [FIELD expenses[3].period]
  
  ${ expenses[4].type.capitalize() }: [FIELD expenses[4].value] [FIELD expenses[4].period]
  
  ${ expenses[5].type.capitalize() }: [FIELD expenses[5].value] [FIELD expenses[5].period]
  
  ${ expenses[6].type.capitalize() }: [FIELD expenses[6].value] [FIELD expenses[6].period]
  
  ${ expenses[7].type.capitalize() }: [FIELD expenses[7].value] [FIELD expenses[7].period]
  
  ${ expenses[8].type.capitalize() }: [FIELD expenses[8].value] [FIELD expenses[8].period]
  
  ${ expenses[9].type.capitalize() }: [FIELD expenses[9].value] [FIELD expenses[9].period]
  
  ${ expenses[10].type.capitalize() }: [FIELD expenses[10].value] [FIELD expenses[10].period]
  
  ${ expenses[11].type.capitalize() }: [FIELD expenses[11].value] [FIELD expenses[11].period]
  
  ${ expenses[12].type.capitalize() }: [FIELD expenses[12].value] [FIELD expenses[12].period]
  
fields:
  - ${ expenses[0].type }: expenses[0].value
    datatype: currency
    default: 0
    inline width: 2em
      
  - For: expenses[0].period
    datatype: number
    inline width: 4em
    default: 12
    code: |
      period_list()
  - ${ expenses[1].type }: expenses[1].value
    datatype: currency
    default: 0
    inline width: 2em
  - For: expenses[1].period
    datatype: number
    default: 12
    code: |
      period_list()
  - ${ expenses[2].type }: expenses[2].value
    datatype: currency
    default: 0
    inline width: 2em
  - For: expenses[2].period
    datatype: number
    code: |
      period_list()
    default: 12
  - ${ expenses[3].type }: expenses[3].value
    datatype: currency
    default: 0
    inline width: 2em
  - For: expenses[3].period
    datatype: number
    code: |
      period_list()
    default: 12
  - ${ expenses[4].type }: expenses[4].value
    datatype: currency
    default: 0
    inline width: 2em
  - For: expenses[4].period
    datatype: number
    code: |
      period_list()
    default: 12
  - ${ expenses[5].type }: expenses[5].value
    datatype: currency
    default: 0
    inline width: 2em
  - For: expenses[5].period
    datatype: number
    code: |
      period_list()
    default: 12
  - ${ expenses[6].type }: expenses[6].value
    datatype: currency
    default: 0
    inline width: 2em
  - For: expenses[6].period
    datatype: number
    code: |
      period_list()
    default: 12
  - ${ expenses[7].type }: expenses[7].value
    datatype: currency
    default: 0
    inline width: 2em
  - For: expenses[7].period
    datatype: number
    code: |
      period_list()
    default: 12    
  - ${ expenses[8].type }: expenses[8].value
    datatype: currency
    default: 0
    inline width: 2em
  - For: expenses[8].period
    datatype: number
    code: |
      period_list()
    default: 12
  - ${ expenses[9].type }: expenses[9].value
    datatype: currency
    default: 0
    inline width: 2em
  - For: expenses[9].period
    datatype: number
    code: |
      period_list()
    default: 12
  - ${ expenses[10].type }: expenses[10].value
    datatype: currency
    default: 0
    inline width: 2em
  - For: expenses[10].period
    datatype: number
    code: |
      period_list()
    default: 12
  - ${ expenses[11].type }: expenses[11].value
    datatype: currency
    default: 0
    inline width: 2em
  - For: expenses[11].period
    datatype: number
    code: |
      period_list()
    default: 12
  - ${ expenses[12].type }: expenses[12].value
    datatype: currency
    default: 0
    inline width: 2em
  - For: expenses[12].period
    datatype: number
    code: |
      period_list()
    default: 12
back button: True     
continue button field: expenses_values
---
id: average cost of living
code:  |
  average_cost_living ={
          "HOUSING":  "Costs include: â¢ rent/mortgage repayments; â¢ other secured loan repayments (there may be several); â¢ council tax; â¢ water charges; â¢ ground rent; â¢ service charges; â¢ an amount for household repairs and maintenance, based on a full yearâs expenditure if possible; â¢ household insurance for both buildings and contents; â¢ any insurance linked to a mortgage, if not already included in mortgage expenses.",
          "CHILDCARE":"Full-time childcare may cost over Â£200 a week. Help with these costs may be available. SeeÂ gov.uk/help-with-childcare-costs.",
          "FUEL": "Fuel costs include charges for electricity, gas and other fuels. Take an annual cost and divide it into weekly or monthly figures. If payments to fuel suppliers include an amount for items other than fuel (eg, payment for a cooker), these should be deducted and only the fuel expenditure listed here.",
          "FURNITURE AND BEDDING":"Costs should be separately itemised. This item may require research by the client or discussion with others with whom s/he lives.",
          "HEALTH COSTS": "Costs include: â¢ prescriptions; â¢ dentistry; â¢ optical charges. These are often high and you should check the clientâs entitlement to reduced or free treatment, and free prescriptions.", 
          "TRANSPORT": "Costs include: â¢ public transport; â¢ the cost of owning a car or motorbike. In this case, the amount spent on tax, insurance, repairs, MOT and petrol should be included. If a car is essential (eg, for travel to work), the cost of its hire purchase (but not any credit sale) agreement should be included, with a note to explain why the item is essential.",
          "FINES": "Instalments payable on fines should be included. SeeÂ Chapter 13Â for ways of reducing these.",
          "LAUNDRY AND DRY CLEANING": "Costs should be averaged over the previous couple of months.",
          "TELEPHONE, TELEVISION AND BROADBAND": "These costs should be converted into weekly or monthly figures.",
          "OTHER HOUSEHOLD ITEMS, TOILETRIES AND FOOD": "The adviser should ensure that the individual circumstances of the client dictate the amount allowed for these items. Other household items, toiletries and food include: â¢ housekeeping; â¢ cleaning materials; â¢ meals outside the home, such as school lunches or canteen meals; â¢ expenses incurred in children going to school or being given pocket money; â¢ nappies and baby items.",
          "CLOTHING AND SHOES":  "These are often bought seasonally and so costs must be estimated annually and divided. It is important to include all small items in this category.",
          "GIFTS, CHARITABLE DONATIONS, AND RELIGIOUS AND CULTURAL ACTIVITIES":  "Costs include: â¢ donations that are an essential part of a personâs membership of a religious community; â¢ classes for children in religious institutions (particularly mosques). This is potentially a sensitive area. If a person is committed to such payments, they should be protected to ensure that debt does not further exclude individuals or families from community life and support.",
          "OTHER COSTS":  "Other costs include: â¢ maintenance/child support payments; â¢ self-employment costs not taken into account when calculating the clientâs net income; â¢ spending for exceptional circumstances â eg, special diets or extra heating because of illness. Apparent âluxuryâ items need to be explained."}  
---
id: sets categories for expenses
code: |
  acl_loop_counter = 0
  for type_key in average_cost_living.keys():
    expenses[acl_loop_counter].type = type_key
    expenses[acl_loop_counter].HELP = average_cost_living[type_key]
    expenses[acl_loop_counter].exists = True
    expenses[acl_loop_counter].exists = True
    acl_loop_counter += 1
  collect_expenses = "Enter your monthly expenses."
---
id: expenses gathered order
code: |
  collect_expenses
  expenses_values
  expenses.gathered = True
---

id: income summary
question: |
  Summary of your Income
subquestion: |
  **Employment Income**
  
  ${ jobs.table }

  Your total annual income from employment is ${ currency(jobs.total()) }
  
  Your total monthly income from employment is ${ currency(jobs.total(period_to_use=12)) }  

  ${ jobs.add_action() }
  
  **Other Income**
  
  ${ other_income.table }

  Your total annual non-wage income is ${ currency(other_income.total()) }
  
  Your total monthly non-wage income is ${ currency(other_income.total(period_to_use=12)) }  

  ${ other_income.add_action() }
  
  **Income from Assets**
  
  ${ income_assets.table }
  
  This information can be edited on the next page with information about all of your assets.

  Your total annual income from assets is ${ currency(income_assets.total()) }
  
  Your total monthly income from assets is ${ currency(income_assets.total(period_to_use=12)) }  

  ${ assets.add_action() }
  
  **Total Income**
  
  Your total annual income is ${ currency((jobs.total() + other_income.total() + income_assets.total())) }
  
  Your total monthly income is ${ currency((jobs.total(period_to_use=12) + other_income.total(period_to_use=12) + income_assets.total(period_to_use=12))) }  
  
continue button field: income_summary
---
id: income from assets calculation
code: |
  loopcounter = 0
  for asset in assets:
    if asset.generates_income:
      income_assets[loopcounter].type = asset.type
      income_assets[loopcounter].value = asset.income
      income_assets[loopcounter].period = asset.period
      loopcounter =+ 1
  income_assets.gathered = True
depends on: 
  - assets
---
id: assets summary
question: |
  Assets Information
subquestion: |

  Assets you have entered so far
  
  ${ assets.table }
  
  Your total assets value is:  ${ currency(assets.total()) }

 
field: assets.there_is_another
buttons:
  - "Add another asset": True
  - "Continue to next section": False
---
id: expenses summary 
question: |
  Expenses
subquestion: |
  ${ expenses.table }
  
  The types of expenses include ${ comma_and_list(expenses.types()) }
  
   Your total monthly expense is ${ currency(expenses.total(period_to_use=12)) }
  
  Your total annual expenses is ${ currency(expenses.total()) }
  
  
  **Expenses Comparison**
  
  % for item in expense_advices:
    ${item} 
    
  % endfor
  
 
field: expenses.there_is_another
buttons:
  - "Add another expense": True
  - "Continue to next section": False
reconsider:
  - expense_advices
---
id: total summary
section: summary
question:  |
 Summary of your income, assets, and expenses 
subquestion:  |

  Great job ${ user.name }. 
  
  From the information you shared we know: 
   
  Your monthly income is ${ currency(jobs.total(period_to_use=12)) }
  
  Your total assets value is ${ currency(assets.total()) } 
  
  Your total expenses is ${ currency(expenses.total(period_to_use=12)) } each month. 
  
    Your monthly disposable income is ${currency(month_disposble_income, symbol=u'Â£')}
  
  You told us about ${len(debt)} debts. In total you have  ${currency(debt.total())} debt. 


back button: True
continue button field: summary
---
id: monthly disposable income calculation
code:  |
  month_disposble_income = jobs.total(period_to_use=12) + other_income.total(period_to_use=12) + income_assets.total(period_to_use=12)- expenses.total(period_to_use=12)
---
################################# PREFERENCES ###################################
---
id: preferences information collection
question:  |
  Tell us about your preferences 
subquestion: |

  Some debt solutions will affect your credit rating, prohibit you from undertaking certain jobs and may have impacts on your home. 
  
  Use the below questions to indicate which outcomes are important to consider.
  
fields:
  - My financial situation likely to change in the near future? : financial_change
    input type: radio
    choices:
      - Agree 
      - Disagree
    help:  |
      Example: inheritance, promotion with job, move to new house etc.
  - It is important to limit how much the effect on my credit: credit_rating1
    input type: radio
    choices:
      - Agree 
      - Disagree
    help:  |
      When you apply for a loan or other type of credit, the credit provider will search your credit reference file to see how much of a risk it is to lend to you. The level of risk is known as your credit rating. It can be affected by your the debt solution.
  - It is important to reduce the cost of the debt solution: cost_debt 
    input type: radio
    choices:
      - Agree 
      - Disagree
    help:  |
      Some debt solution are significantly more expensive than others, from 90 pounds to 700 to few thousands.
  - It is important to me to keep my home: home_owner_pri
    input type: radio
    choices:
      - Agree 
      - Disagree
    help:  |
      Some debt solution may force you to sell your house.
  
  - I am okay with speaking to creditors directly: deal_creditor
    input type: radio
    choices:
      - Agree 
      - Disagree
    help:  |
      Some debt solution will deal with your creditors for you.
continue button field: preferencees_questions
back button: True
---
id: preferences translation to statements
code:  |
  if home_owner_pri == 'Disagree':
    home_will="might be okay with selling your house."
  else:
    home_will="want to keep your house."
  
  if cost_debt == 'Agree':
    cost_will= "you want to spend less on the debt solution."
  else:
    cost_will= "the cost of the debt solution is not an issue for you."
  
  if credit_rating1 == 'Agree':
    credit_will="you want to find a solution without impacting your credit rating."
  else:
    credit_will="you do not mind if your credit rating is impacted."
    
  if financial_change == 'Agree':
    change_will ="you are likely to change your financial or personal situation."
  else:
    change_will ="you are less likely to change your financial or personal situation."
  
  if deal_creditor == 'Disagree':
    change_creditor="you do not want to deal with creditors."
  else:  
    change_creditor="you do not mind to deal with creditors."
  
  
---
id: debt solutions summary
section: debt_solutions_section
event: debt_solutionss
question: | 
  You might consider the following solutions with a debt advisor
subquestion: |
  Don't worry about writing it all down. We will include this information for you to save for your records. 
  
  **The following solutions might be ready for you:**
  
  **Debt Management Plan**
  
  A debt management plan (DMP) helps you to manage your debts and pay them off at a more affordable rate by making reduced monthly payments. 
  
  % for key in Available_solutions.keys():
    **${Available_solutions[key]['title']}**
    
    ${Available_solutions[key]['blurb']}
       
    
  % endfor

  **The following solutions are not ready for you:**[BR]
  [BR]
  % for key in not_available_solution.keys():
  ${not_available_solution[key]['title']}
    
  % endfor
  
back button: True
continue button field: user_saw_debt_solutions
---
######################### UNUSED EVENTS #################################
comment: |
  I believe these events are unused.  The starting version of the interview used these events in a clever way to put more information that the user could click to.  We moved this information to a pdf print-out a user could take with them and no longer use the events.
---
id: bankruptcy relevant description
section: debt_solutions_section
event: Bankruptcy
question:  |
  About Bankruptcy  
subquestion:  |
  ${ bankruptcy_information }
continue button field: user_saw_intro
---
id: debt relief order relevant description
section:  debt_solutions_section
event: Debt Relief Order
question:  |
  Debt Relief Order
subquestion:  |
  ${ debt_relief_order  }
continue button field: user_saw_intro
---
id: administration order relevant description
section:  debt_solutions_section
event: Administration Order 
question:  |
  Administration Order 
subquestion:  |
  ${ administration_order }
continue button field: user_saw_intro  
---
id: individual voluntary agreement relevant description
section: debt_solutions_section
event: Individual Voluntary Arrangement 
question:  |
  Individual Voluntary Arrangement 
subquestion:  |
  ${ individual_voluntary_agreement }
continue button field: user_saw_intro    
---
id: debt management plan relevant description
section: debt_solutions_section
event: Debt Management Plan
question:  |
  Debt Management Plan
subquestion:  |
  ${ debt_management_plan }
continue button field: user_saw_intro
---
id: debt relief order not relevant description
section:  debt_solutions_section
event: not Debt Relief Order
question:  |
  You cant  apply for Debt relief Order  
subquestion:  |
  The following table shows comparison of DRO requirments and your personal situation, ther is one or more Criteria you dont meet. 
  
   |Requirment | Your situation|
   |-----------|----------|
   |less than Â£75 monthly disposible income | Â£${month_disposble_income}
   | max Â£30,000 debt       |Â£${debt.total()}       |
   | Not a homeowner       |${is_homeowner}      |
   | Assets no more than Â£2000| Â£${assets.total()}|
   | it's been at least 6 years since your last DRO | not know |
   | Currently going through another formal insolvency procedure| ${another_debt_solution} |
   
   It is also important to give your information truthfully when you apply for a DRO. 
  
    
    The following debts of yours is **included** in a DRO:
      % for item in Dro_debt:
        **${item}**
      % endfor
      
      
      
  The following debts of yours is **not** included in a DRO:
      % for item in Dro_debt_not:
        **${item}**
      % endfor
continue button field: user_saw_intro
---
id: administration order not relevant description
section:  debt_solutions_section
event: not Administration Order
question:  |
  You cant apply for Administration Order
subquestion:  |
   The following table shows comparison of Administration Order requirments and your personal situation, but there is one or more Criteria you dont meet. 
   
   |Requirement | Your situation|
   |-----------|----------|
   |at least 2 debts | ${len(debt)} debt     |
   | max Â£5,000 debt       |Â£${debt.total()}       |
   | one of your debts is a county court or high court judgment       |${is_court_debt}      |
   |you have a regular income with some spare income each month| Â£${month_disposble_income } disposable income|
   | you don't want to have to deal with your creditors directly| ${change_creditor} |

continue button field: user_saw_intro
---
###################### TERMS ####################
comment: |
  Terms were popular in user testing and probably should be developed further.  The code for this block could be created in the variables table of the Airtable.
terms:  
  unsecured debts:  |
    An unsecured debt is a debt for which the creditor does not have a security interest in collateral, and the creditor is therefore not entitled to take property from you to satisfy that debt without a judgment.
    
    Common types of unsecured debt are credit cards, medical bills, most personal loans, and student loans*. These debts help you do something (buy items, pay your doctor, get an education), but they are not backed by a specific asset.
  secured debts:  |
    A secured debt is a debt for which the creditor has a security interest in collateral, meaning the creditor has a right to take property to satisfy the debt.
    
  disposable income: | 
    Disposable income is the amount of money you have left to spend from your income after meeting your expenses for your needs 

  formal insolvency procedure: | 
    Someone is said to be âinsolventâ if they are unable to pay their debts as they fall due. There are four ways in which you can reach a formal arrangement with your creditors to resolve your financial problems. 

  possession order: | 
    Possession orders is a court order that requires a tenant to leave the property by a given date.
  
---
####################### DEBT SOLUTION LOGIC ##############################
comment: |
  The DADict method slice is used to make another copy of debt_solutions when match_dict is all false.  
id: debt solutions filtering
code:  |
  Available_solutions = debt_solutions.slice(lambda y: y.match_dict.all_false())
---
code: |
  not_available_solution = debt_solutions.slice(lambda y: y.match_dict.any_true())
---
comment: |
  To determine .match_dict, each requirement's formula is called.  If that requirement formula evaluates to False, then the user meets that requirement for the debt solution. 

code: |
  for req in debt_solutions[i]['requirements']:
   debt_solutions[i].match_dict[req] = debt_solutions[i]['requirements'][req]['formula']
  debt_solutions[i].match_dict.gathered = True
---
comment: |
  Dro_notcover_list is used by the Debt Solutions page.  An expansion of debt types or debt solutions, that associates allowed debt types with debt solutions, should replace this.
id: debt relief order relevant debts filtering
code:  |
  Dro_notcover_list=['TV license','Court Fine/ Penalty charge','Student Loans','Child maintenance/child support agency debts','Claims against you for damage or personal injury','Criminal fines']
  Dro_debt_not=["None"]
  Dro_debt=[]
   
  for item in debt:
    if item.name in Dro_notcover_list:
      Dro_debt_not.remove("None")
      Dro_debt_not.append(item.name)
    else:
      Dro_debt.append(item.name)
  
 
---
#################### PREDOCX VARIABLES ################################
comment: |
  This makes sure that all of these variables are defined before a docx is assembled, because undefined variables in a docx can increase processing time.
id: collect variables before docx assembled
code: |
  total_annual_income
  total_assets
  total_expenses
  emergency_debts
  for deb in debt:
    deb.urgency_boolean
    deb.top_type
  priority_debts
  nonemergency_debts
  nonpriority_debts
  home_will
  debt_total
  debt_solutions_details_added
  predocx_variables = True
---
id: total income calculation
code: |
  total_annual_income = currency(jobs.total() + other_income.total() + income_assets.total())
---
comment: |
  We should eliminate the use of total_assets but keeping this block in here as backup.
id: format total assets as currency
code: |
  total_assets = currency(assets.total())
---
comment: |
  We should eliminate the use of total_expenses but keeping this block in here as backup.
id: format total expenses as currency
code: |
  total_expenses = currency(expenses.total())
---
##################### UNUSED UPLOAD AND SIGNATURE #############################
comment: |
id: make pdf
code: |
  uploaded_file.make_ocr_pdf() 
  ocr_finished = True
---
id: document upload
question: |
  Please Upload supporting files if any. 
subquestion: |
  I will convert it to a searchable PDF.
fields:
  - File: uploaded_file
    datatype: files
    required: False
section: Income
continue button field: documents_uploaded
---
id: signature collection
question: |
  Sign your name
subquestion: |
  By signing your name, you agree to
  our terms and conditions.
section: Signatures
signature: your_signature
continue button field: user_signed
---
####################### FINAL DOCUMENT AND DOCX TEMPLATES ##################
id: final document
section: conclusions
decoration: file-download
event: letter_and_end
allow downloading: True
include download tab: False
question: |
  Download your document 
subquestion: | 
  Below is your document. It includes: 
  [BR]
  
    * Instructions for your next steps;
    * An organized brief with your information about your debts, income, assets and expenses; and 
    * Information about potential debt solutions.
  
  Click the image below to view your document [BR]
  [BR]
  Download all of your documents at the bottom of the page. 
  [BR]
  [BR]
  ${ pdf_concatenate([instructions_sheet, debt_brief, debt_solutions_sheet])}
  [BR] 
  Click "Back" if you need to make any changes.  

attachment code: |
  [instructions_sheet, debt_brief, debt_solutions_sheet]
buttons:
  - Exit: exit
  - Restart: restart
back button: True
---
id: debt brief
attachment:
  - name: Personal Debt Brief
    filename: Debt Brief 
    variable name: debt_brief
    valid formats:
      - docx
      - pdf
    docx template file: debt_report.docx
---
id: instructions docx
attachment:
  - name: Next Step Instructions
    filename: Next Steps 
    variable name: instructions_sheet
    valid formats:
      - docx
      - pdf
    docx template file: debt_instructions.docx
---
id: solutions docx
attachment: 
  - name: Potential Debt Solutions
    filename: Potential Debt Solutions
    variable name: debt_solutions_sheet
    valid formats:
      - docx
      - pdf
    docx template file: debt_solutions.docx
--- 
id: individual_voluntary_agreement docx 
attachment: 
  - name: IVA 
    filename: IVA
    variable name: individual_voluntary_agreement
    docx template file: individual_voluntary_agreement.docx
---
id: debt_relief_order docx 
attachment: 
  - name:: DRO 
    filename: DRO 
    variable name: debt_relief_order
    docx template file: debt_relief_order.docx
---
id: bankruptcy_information docx 
attachment: 
  - name: bankruptcy details 
    filename: bankruptcy details 
    variable name: bankruptcy_information
    docx template file: bankruptcy_information.docx
--- 
id: administration_order docx 
attachment: 
  - name: admin order 
    filename: admin order 
    variable name: administration_order
    docx template file: administration_order.docx
---
########################## DEBT DICTIONARY ##########################
comment: |
  This is a simple dict (not DADict) that is used to order how a user can select a type of debt.
  The debt dictionary creator View in the debt_type table in the Airtable can make it easy to update and add, which can be cut and paste here.
code: |
  debt_dict = {
    'Debt':
      {
       'class_name': Debt,
       'label':"Debt",
       'more_specific_question':"What type of debt would you like to add?",
        'more_specific':["Credit Card", "Student Loans", "Payday loans", "Mortgage", "Bank overdraft", "Loans", "Rent arrears", "Consumer Debt", "Tax", "Penalties", "Child maintenance/child support agency debts", "Liability"]
      },
    'Consumer Debt':
      {
       'class_name': ConsumerDebt,
       'label':"Other bills",
       'help': " Other bills includes: [BR] Water arrears, [BR] Energy bill arrears, [BR] catalogue spending, [BR] Private parking charges [BR] Other outstanding invoices or bills, or monthly bills",
       'more_specific_question':"What kind of bills?",
        'more_specific':["Water arrears", "Energy bill arrears", "Catalogue spending", "Private parking charges", "Other outstanding bills, for example solicitors costs, invoices for building work and vets bills"]
      },
    'Tax':
      {
       'class_name': TaxDebt,
       'label':"Taxes",
       'help': "Taxes includes: [BR] Unpaid income tax [BR] National Insurance[BR] Value added tax (VAT) [BR] TV license [BR] Non-domestic rates [BR] Council tax [BR] Overpayment of benefits",
       'more_specific_question':"What kind of taxes?",
        'more_specific':["Unpaid income tax, National Insurance or VAT", "TV license", "Non-domestic rates", "Council Tax", "Overpayment of benefits"]
      },
    'Overpayment of benefits':
      {
       'class_name': OverpaymentOfBenefits,
       'label':"Overpayment of benefits",
       'help': "Overpayments of tax credits can arise, for example, if someone does not tell HMRC about a change in her/his circumstances, if s/he gives it incorrect infomation, or if her/his income falls or rises by more than Â£2,500 in the current year compared with the previous tax year.",
       'more_specific_question':"What type of benefits were overpaid?",
        'more_specific':["Universal credit advance", "Tax credit overpayments", "Social fund loan"]
      },
    'Penalties':
      {
       'class_name': PenaltiesDebt,
       'label':"Fines and penalties",
       'help': "Fines and penalties includes: [BR] Shoplifting recovery [BR] Fines [BR] Parking tickets [BR] Traffi penalties",
       'more_specific_question':"What type of penalties?",
        'more_specific':["Shoplifting recovery", "Fine", "unpaid parking tickets - these are called Penalty Charge Notices or Parking Charge Notices", "Traffic penalties"]
      },
    'Liability':
      {
       'class_name': LiabilityDebt,
       'label':"Court actions against you",
       'help': "Court actions against you includes: [BR] Shoplifting recover [BR] Clams against you for damage or personal injury",
       'more_specific_question':"What kind of court action?",
        'more_specific':["Shoplifting recovery", "Claims against you for damage or personal injury"]
      },
    'Loans':
      {
       'class_name': LoansDebt,
       'label':"Other loans",
       'help': "Other loans include:[BR] Loan from family member or friend [BR] store cards\Budget Account [BR] Charge Card [BR] Personal loan [BR] Hire purchase [BR] Bill of Sale [BR] Credit sale agreement [BR] Interest-free credit [BR] Pawnbroker [BR] Trading cheque or voucher",
       'more_specific_question':"What kind of loan?",
        'more_specific':["Loan from family member or friend", "store cards\Budget Account", "Charge Card", "Personal loan", "Hire purchase", "Bill of Sale", "Credit sale agreement", "Interest-free credit", "Pawnbroker", "Trading cheque or voucher"]
      },
    'Unpaid income tax, National Insurance or VAT':
      {
       'class_name': NationalTax,
       'label':"Unpaid income tax, National Insurance or VAT",
       'more_specific_question':"Which kind of national tax?",
        'more_specific':["HMRC tax debt", "National insurance contributions", "Value added tax"]
      },
    'Credit Card':
      {
       'class_name': CreditCardDebt,
       'label':"Credit card",
       'help': "A credit card (eg, Mastercard, Visa) is a form of revolving credit (see here) and allows you to buy goods or services from a trader. The trader invoices the credit card company and you receives a monthly account showing all transactions made during that period. A minimum monthly repayment is required â often covering at least interest, fees and charges plus 1 per cent of the capital outstanding.",
        'more_specific':[]
      },
    'Rent arrears':
      {
       'class_name': RentDebt,
       'label':"Rent arrears",
       'help':"Rent is payable by tenants to landlords in exchange for the use of their property. A landlord may be either a private individual or a property company, or a public sector landlord, such as a local authority or housing association.",
        'more_specific':[]
      },
    'Bank overdraft':
      {
       'class_name': BankOverdraft,
       'label':"Bank overdraft",
       'help': "The bank allows a customer with a current account to overdraw on the account up to a certain amount. Repayment of the overdraft is made as money is paid into the account.",
        'more_specific':[]
      },
    'Water arrears':
      {
       'class_name': WaterArrears,
       'label':"Water arrears",
       'help':"Water companies charge for water, sewerage and environmental services on the basis of either a meter or the old rating system, which was abolished as the basis of a local tax in April 1990 in England and Wales. Under the rating system, every dwelling was given a rateable value. Each year, water companies set a ârate in the poundâ, which converts this rateable value into an annual charge. For example, a rate of 20p in the pound converts a rateable value of Â£300 to an amount of water rates payable of Â£60. If a water meter is installed, a client pays for the actual amount of water used. Charges are per cubic metre at a rate set by the water company. A standing charge is also payable. There may also be installation and inspection charges. Separate charges are levied for sewerage and environmental services. These charges are based either on the rateable value of the property or on the amount of water used as recorded by the meter.",
        'more_specific':[]
      },
    'Loan from family member or friend':
      {
       'class_name': InformalLoan,
       'label':"Loan from family member or friend",
       'help': "Money that a friend or family loans you for personal or buisness use",
        'more_specific':[]
      },
    'Social fund loan':
      {
       'class_name': SocialFundLoan,
       'label':"Social fund loan",
        'more_specific':[]
      },
    'Universal credit advance':
      {
       'class_name': UniversalCreditAdvance,
       'label':"Universal credit advance",
        'more_specific':[]
      },
    'Energy bill arrears':
      {
       'class_name': EnergyBillArrears,
       'label':"Energy bill arrears",
       'help':"Gas and electricity suppliers charge for their fuel in a number of ways. Pre-payment meters, quarterly accounts, direct debit and online schemes are common payment methods. Clients have a choice of supplier, although a supplier to whom arrears are owed can object to a transfer in certain circumstances. The industry is regulated by Ofgem. Suppliers are required to operate codes of practiceÂ on the payment of bills and disconnection, including guidance for customers who may have difficulty in paying. You should obtain copies of the codes of practice of your clientsâ suppliers. Suppliers are required to take into account clientsâ âability to payâ when recovering debts.",
        'more_specific':[]
      },
    'Claims against you for damage or personal injury':
      {
       'class_name': CivilDamages,
       'label':"Claims against you for damage or personal injury",
        'more_specific':[]
      },
    'HMRC tax debt':
      {
       'class_name': IncomeTax,
       'label':"HMRC tax debt",
       'help':"Most income above certain fixed limits is taxable. Employees are taxed by direct deduction from their income by their employer (the pay as you earn (PAYE) scheme). PAYE taxpayers rarely owe tax on their earned income unless mistakes have been made in the amounts deducted. Self-employed people receive their earnings before tax is deducted and are responsible for paying their own tax directly to HM Revenue and Customs (HMRC). Arrears are, therefore, more likely to occur with self-employment. SeeÂ Chapter 16Â for more information.",
        'more_specific':[]
      },
    'TV license':
      {
       'class_name': TVLicenseDebt,
       'label':"TV license",
       'help': "A TV licnese is required to use a television",
        'more_specific':[]
      },
    'Child maintenance/child support agency debts':
      {
       'class_name': ChildSupport,
       'label':"Child support and maintenance",
       'help':"The term âchild supportâ is used here to describe child maintenance paid by parents under the statutory scheme run by the Child Maintenance Service, which is part of the DWP. Some clients may have historic arrears from a previous scheme run by the Child Support Agency. All Child Support Agency cases have now been closed and ongoing arrangements ended. Parents needing ongoing child support have been encouraged to make a âfamily-based arrangementâ. If a family-based arrangement is not possible, they can apply to the Child Maintenance Service under the â2012 schemeâ.",
       'more_specific_question':"Is the debt based on child support or spousal maintance?",
        'more_specific':["Maintenance payments"]
      },
    'Fine':
      {
       'class_name': Fine,
       'label':"Fine",
       'help': "Fines are the most common form of punishment imposed by the magistratesâ or Crown Court for criminal offences.",
        'more_specific':[]
      },
    'Catalogue spending':
      {
       'class_name': CatalogueSpending,
       'label':"Catalogue spending",
       'help':"Mail order catalogues offer a way of buying goods by post and usually spread payment over a period of weeks by instalments. Payments are sometimes collected by an agent â often a friend or neighbour of the client. The arrangement is usually an ongoing one.",
        'more_specific':[]
      },
    'Student Loans':
      {
       'class_name': StudentLoans,
       'label':"Student Loans",
       'help': "Loans is used to pay for a student's education",
        'more_specific':[]
      },
    'Personal loan':
      {
       'class_name': PersonalLoan,
       'label':"Personal loan",
       'help':"A personal loan is a loan offered at a fixed or variable rate of interest over a set period.",
        'more_specific':[]
      },
    'unpaid parking tickets - these are called Penalty Charge Notices or Parking Charge Notices':
      {
       'class_name': PenaltyChargeDebt,
       'label':"Parking tickets",
       'help': "Many private landowners, including retail parks and supermarkets, allow customer parking on their land subject to terms and conditions, and impose charges on motorists who contravene these terms and condition",
        'more_specific':[]
      },
    'Hire purchase':
      {
       'class_name': HirePurchase,
       'label':"Hire purchase",
       'help':"A hire purchase agreement hires goods to the client for an agreed period. At the end of this period the client has the option to buy them (usually for a nominal amount). Hire purchase is predominantly used for motor vehicles and household goods. The creditor (who is the hirer) owns the goods, generally having bought them from the supplier who introduced the client to the hirer.",
        'more_specific':[]
      },
    'Tax credit overpayments':
      {
       'class_name': TaxCreditOverpayment,
       'label':"Tax credit overpayments",
       'help':"Child tax credit and working tax credit are means-tested tax credits administered by HM Revenue and Customs (HMRC). Overpayments of tax credits can arise, for example, if someone does not tell HMRC about a change in her/his circumstances, if s/he gives it incorrect infomation, or if her/his income falls or rises by more than Â£2,500 in the current year compared with the previous tax year. Some changes in circumstances must be reported immediately and are taken into account. However, changes in income do not have to be reported immediately and can be notified at the end of the tax year when the award is finalised. Clients faced with this choice may need specialist advice. For further information about tax credits, seeÂ Chapter 7Â and CPAGâsÂ Welfare Benefits and Tax Credits Handbook.1",
        'more_specific':[]
      },
    'Payday loans':
      {
       'class_name': PaydayLoan,
       'label':"Payday loans",
       'help': "These are small (generally between Â£50 and Â£800) loans intended to cover short-term financial difficulties such as an unexpected bill or an emergency. They are repayable in full on your next payday.",
        'more_specific':[]
      },
    'store cards\Budget Account':
      {
       'class_name': BudgetAccount,
       'label':"store cards\Budget Account",
       'help':"A budget account is a type of revolving creditÂ (seeÂ here) provided by shops. The client can spend up to an agreed credit limit and makes regular repayments.",
        'more_specific':[]
      },
    'Other outstanding bills, for example solicitors costs, invoices for building work and vets bills':
      {
       'class_name': NonRegularBill,
       'label':"Other outstanding bills, for example solicitor's costs, invoices for building work and vets bills",
        'more_specific':[]
      },
    'Bill of Sale':
      {
       'class_name': BillOfSale,
       'label':"Bill of Sale",
       'help': "A bill of sale is a way of raising money by offering an item of personal property (commonly, a car) as security for a loan. The essential feature of a bill of sale is that the goods remain in your possession and use  but ownership is transferred to the creditor, so they can be repossessed and sold if the debt is not repaid.",
        'more_specific':[]
      },
    'Charge Card':
      {
       'class_name': ChargeCard,
       'label':"Charge Card",
       'help':"A charge card (eg, American Express) is not a credit card. Purchases are made and the amount is charged to the account, but the balance must be cleared in full at the end of each charging period (usually monthly).",
        'more_specific':[]
      },
    'Credit sale agreement':
      {
       'class_name': CreditSaleAgreement,
       'label':"Credit sale agreement",
       'help':"Goods bought on credit sale are owned immediately by the client. Regular payments are due in accordance with the agreement. The creditor is often the supplier of the goods and this type of credit is used extensively to sell furniture and cars.",
        'more_specific':[]
      },
    'Interest-free credit':
      {
       'class_name': InterestFreeCredit,
       'label':"Interest-free credit",
       'help':"This is a type of credit sale agreement in which money is loaned to buy goods without any interest being charged. It is usually offered by larger stores. Some agreements offer interest-free credit provided the total balance is paid off within a specified period and, thereafter, become ordinary credit sale agreements.",
        'more_specific':[]
      },
    'Maintenance payments':
      {
       'class_name': Maintenance,
       'label':"Spousal maintenance",
       'help':"Court or county court orders that require ex-spouse to make maintenance payments to the other partner for her/himself and/or any children.",
        'more_specific':[]
      },
    'Mortgage':
      {
       'class_name': MortgageDebt,
       'label':"Mortgage",
       'help':"The term âmortgageâ is used to describe a loan to buy a house or flat. If repayments are not maintained, the lender can recover the money lent by repossessing the property and selling it",
        'more_specific':[]
      },
    'National insurance contributions':
      {
       'class_name': NationalInsurance,
       'label':"National insurance contributions",
       'help':"National insurance (NI) contributions are a compulsory tax on earnings and profits above certain levels (set annually).",
        'more_specific':[]
      },
    'Non-domestic rates':
      {
       'class_name': NonDomesticRates,
       'label':"Non-domestic rates",
       'help': "Non-domestic rates (business rates) are charged on most commercial property by local authorities. They are based on a national valuation and fixed amounts are charged across England and Wales in proportion to this.",
        'more_specific':[]
      },
    'Pawnbroker':
      {
       'class_name': Pawnbroker,
       'label':"Pawnbroker",
       'help':"Money is lent against an article(s) (pawn) left with the pawnbroker as security â a pledge. The goods can only be reclaimed (redeemed) if the loan is repaid with interest. If the loan is not repaid, the pawnbroker can sell the goods.",
        'more_specific':[]
      },
    'Private parking charges':
      {
       'class_name': PrivateParkingCharge,
       'label':"Private parking charges",
       'help':"Many private landowners, including retail parks and supermarkets, allow customer parking on their land subject to terms and conditions, and impose charges on motorists who contravene these terms and conditions. Many landowners employ and authorise agents to manage parking and enforce terms and conditions on the land in question (known as âcar park operatorsâ). Since 1 October 2012, it has beenÂ illegal to clamp or remove a motor vehicle without lawful authority â eg, by the police, a government agency or local authority.1",
        'more_specific':[]
      },
    'Revolving credit':
      {
       'class_name': RevolvingCreditDebt,
       'label':"Revolving credit",
       'help':"Revolving credit is a type of personal borrowing in which the creditor agrees to a credit limit and the client can borrow up to that limit, provided s/he maintains certain agreed minimum payments. Revolving credit takes a number of different forms â eg, credit cards, budget accounts, catalogues and store cards (see under the individual headings for more information about each type of credit).",
        'more_specific':[]
      },
    'Trading cheque or voucher':
      {
       'class_name': TradingCheque,
       'label':"Trading cheque or voucher",
       'help':"Finance companies may supply a voucher or cheque to the client to be used at specified shops in exchange for goods. Repayments, which include a charge for the credit, are then made by instalments to the finance company. The shop is paid by the credit company.",
        'more_specific':[]
      },
    'Traffic penalties':
      {
       'class_name': TrafficPenaltiesDebt,
       'label':"Traffic penalties",
       'help':"A number of traffic penalties, particularly parking charges and certain other fixed penalty notices such as bus lane contraventions and the London congestion charge, are recovered by local authorities using the county court under Part 75 of the Civil Procedure Rules.",
        'more_specific':[]
      },
    'Value added tax':
      {
       'class_name': ValueAddedTax,
       'label':"Value added tax",
       'help':"Value added tax (VAT) is a tax charged by HMRC on most transactions of businesses with an annual taxable turnover of more than a certain limit, set annually. A business must be registered for VAT unless its turnover is below the limit.",
        'more_specific':[]
      },
    'Council Tax':
      {
       'class_name': CouncilTax,
       'label':"Council Tax",
       'help': "Council tax is a tax administered by local authorities, comprising two equal elements â a âpropertyâ element and a âpeopleâ element.",
        'more_specific':[]
      },
    'Shoplifting recovery':
      {
       'class_name': ShopliftingRecovery,
       'label':"Shoplifting recovery",
       'help':"Many people have been threatened with county court action by civil recovery agents for the recovery of losses allegedly incurred by retailers following allegations either of theft by employees or Â shopliftingÂ  by customers, in many cases involving goods of relatively low value." ,
        'more_specific':[]
      },
    }
---
########################## DEBT SOLUTIONS DICTIONARY ##########################
comment: |
  This block sets 'details' to the right docx template variable, because this does not work in the data from code block.  I removed a Mandatory: True because it wasn't being used - this block was being called by the final letter docx template before it would call it because it was mandatory.  I included it in the predocx variables code, but it doesn't appear to make a difference in processing time.
code: | 
  debt_solutions['Bankruptcy']['details'] = bankruptcy_information
  debt_solutions['Administration Order']['details'] = administration_order
  debt_solutions['Individual Voluntary Agreement']['details'] = individual_voluntary_agreement
  debt_solutions['Debt Relief Order']['details'] = debt_relief_order 
  debt_solutions_details_added = True
---
comment: |
  The big drawback to this using data from code is that all of the data in the block is evaluated when debt_solutions is called.  That means debt_solutions can't be called until the user is ready to complete all of the questions required by each and every formula in debt_solutions.
  I created another yaml file called debt_solutions.yml that fixes this problem, by separating the requirements attributes into docassemble code blocks.  The other benefit of debt_solutions.yml is that it can be used by other interviews like logic_tester.yml.
  
id: Debt Solutions 
variable name: debt_solutions
use objects: True
data from code:
  Bankruptcy:
    title: | 
      "Bankruptcy" 
    blurb: | 
      "Bankruptcy is a form of insolvency and is normally only suitable if you canât pay back your debts in a reasonable time. When you go bankrupt almost all of your debts are written off. Deciding to go bankrupt is a big step that involves fees and can impact different areas of your life, such as your job or home."
    cost: 680
    credit rating: |
      "Strongly Affected"
    duration in months: 12
    home: | 
      "risk"
    requirements:
      Minimum Amount:
        formula: |
          (debt.total() < 750)
        formula_value: 750
        sample_formula: |
          "(debt.total() < formula_value)"
        formula_field: |
          "min_amount" 
        reason: |
          "Your debt amount " + currency(debt.total()) + " do not meet the minimum requirments "+ currency(750)
#        sample_reason: |
#          '"Your debt amount " + currency(debt.total()) + " do not meet the minimum requirments "+ currency(formula_value)'
      Maximum Assets:
        formula: |
          1000000 <= assets.total()
        formula_value: 1000000
        sample_formula: |
          "formula_value <= assets.total()"
        formula_field: |
          "assets"
        reason: |
          "you currently have assets worth "+currency(assets.total())+" which is more than what is required:  "+ currency(1000000)
#        sample_reason: |
#          '"you currently have assets worth "+currency(assets.total())+" which is more than what is required:  "+ currency(formula_value)'
  Debt Relief Order:
    title: | 
      "Debt Relief Order"
    blurb: | 
      "You do not have to make payments towards most types of debt included in your debt relief order and your creditors canât force you to pay off the debts. A debt relief order usually lasts a year unless your situation improves. When the debt relief order ends, most of your debts will be written off. " 
    cost: 90
    credit rating: |
      "affected"
    duration in months: 12
    home: |
      "safe"
    requirements:
      Maximum Income:
        formula: |
          month_disposble_income >= 75
        formula_value: 75
        sample_formula: |
          "month_disposble_income >= formula_value"
        formula_field: |
          "income"
        reason: |
          "Your net monthly income " + currency(month_disposble_income) + " exceeded maximum allowance "+ currency(75)
        sample_reason: |
          '"Your net monthly income " + currency(month_disposble_income) + " exceeded maximum allowance "+ currency(formula_value)'
      Maximum Assets:
        formula: |
          2000 <= assets.total()
        formula_value: 2000
        sample_formula: |
          "formula_value <= assets.total()"
        formula_field: |
          "assets"
        reason: |
          "you currently have assets worth "+currency(assets.total())+" which is more than what is required:  "+ currency(2000)
#        sample_reason: |
#          '"you currently have assets worth "+currency(assets.total())+" which is more than what is required:  "+ currency(formula_value)'
      Nonhomeowner:
        formula: |
          (user.house_status =="Mortgaged" or user.house_status =="Owns property outright")
        formula_field: |
            "homeowner"
        reason: |
          "Homeowners are not eligilbe for a Debt Relief Order"
      Maximum Amount:
        formula: |
          30000 < debt.total()
        formula_value: 30000
        sample_formula: |
          "formula_value < debt.total()"
        formula_field: |
          "amount"
        reason: |
          "Your debt amount " + currency(debt.total()) + " exceeded maximum allowance "+ currency(30000)
#        sample_reason: |
#          '"Your debt amount " + currency(debt.total()) + " exceeded maximum allowance "+ currency(formula_value )'
  Administration Order:
    title: | 
      "Administration Order"
    blurb: | 
      "An administration order is a formal, legal debt solution which means it's approved by the court and your creditors have to stick to it. It requires two or more debts, yout debts no more than 5000 pounds in total, and a court judgement, if you donât have a county court judgment or high court judgment, you need to wait for one of your creditors to take court action against you. As soon as judgment is entered you can apply for an administration order." 
    cost: .1
    credit rating: |
      "affected"
    duration in months: 36
    home: |
      "risk"
    requirements:
      Maximum Amount: 
        formula: |
          5000 < debt.total()
        formula_value: 5000
        sample_formula: |
          "formula_value < debt.total()"
        formula_field: |
          "amount"
        reason: |
          "Your debt amount " + currency(debt.total()) + " exceeded maximum allowance "+ currency(5000)
#        sample_reason: |
#          '"Your debt amount " + currency(debt.total()) + " exceeded maximum allowance "+ currency(formula_value )'
      Minimum Number of Debts:
        formula: |
          len(debt) <=1
        formula_value: 1 
        sample_formula: |
          "len(debt) <=formula_value"
        formula_field: |
          "number"
        reason: |
          "you need to have more than 1 debts, you currently have: "+ str(len(debt))+" debts"
      Maximum Assets:
        formula: |
          100000<= assets.total()
        formula_value: 100000
        sample_formula: |
          "formula_value<= assets.total()"
        formula_field: |
          "assets"
        reason: |
          "you currently have assets worth "+currency(assets.total())+" which is more than what is required:  "+ currency(100000)
#        sample_reason: |
#          '"you currently have assets worth "+currency(assets.total())+" which is more than what is required:  "+ currency(formula_value)'
      Court Case Required:
        formula: |
          court_case
        formula_field: |
          "court_case"
        reason: |
          "An Administration Order is not applicable unless the debt is related to a court case."
  Individual Voluntary Agreement:
    title: | 
      "Individual Voluntary Agreement" 
    blurb: | 
      " An individual voluntary arrangement (IVA) is a formal and legally binding agreement between you and your creditors to pay back your debts over a period of time. This means itâs approved by the court and your creditors have to stick to it." 
    cost: 4000
    credit rating: |
      "affected"
    duration in months: 60
    home: |
      "safe"
    requirements:
      Maximum Amount:  
        formula: |
          1000000 < debt.total()
        formula_value: 1000000
        sample_formula: |
          "formula_value < debt.total()"
        formula_field: |
          "amount"
        reason: |
          "Your debt amount " + currency(debt.total()) + " exceeded maximum allowance "+ currency(1000000 )
#        sample_reason: |
#          '"Your debt amount " + currency(debt.total()) + " exceeded maximum allowance "+ currency(formula_value )'
      Maximum Assets:
        formula: |
          100000<= assets.total()
        formula_value: 100000
        sample_formula: |
          "formula_value<= assets.total()"
        formula_field: |
          "assets"
        reason: |
          "you currently have assets worth "+currency(assets.total())+" which is more than what is required:  "+ currency(100000)
#        sample_reason: |
#          '"you currently have assets worth "+currency(assets.total())+" which is more than what is required:  "+ currency(formula_value)'
---

